{
  "App": {
    "AllowAccessToGlobals": true,
    "ControlPropertyState": [
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "320",
        "InvariantPropertyName": "MinScreenHeight",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "320",
        "InvariantPropertyName": "MinScreenWidth",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "ConfirmExit",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "[1200, 1800, 2400]",
        "InvariantPropertyName": "SizeBreakpoints",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "BackEnabled",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "Concurrent(\r\n    // Custom themeing colors\r\n    ClearCollect(\r\n        Colors,\r\n        { Color: \"Primary\", Hex: \"#040054\", RGB: RGBA(48, 36, 80, 1) },\r\n        { Color: \"Muted Primary\", Hex: \"#827b96\", RGB: RGBA(130, 123, 150, 1) },\r\n        { Color: \"Focus Primary\", Hex: \"#c455ff\", RGB: RGBA(196, 85, 255, 1) },\r\n        { Color: \"Danger\", Hex: \"#d3080c\", RGB: RGBA(211, 8, 12, 1) },\r\n        { Color: \"Grey\", Hex: \"#626262\", RGB: RGBA(118, 118, 118, 1) },\r\n        { Color: \"Light Grey\", Hex: \"#E8E8E8\", RGB: RGBA(161, 161, 161, 1) },\r\n        { Color: \"Background\", Hex: \"#F6F8FF\", RGB: RGBA(246, 248, 255, 1) },\r\n        { Color: \"Purple\", Hex: \"#C06FEB\", RGB: RGBA(192, 111, 235, 1) },\r\n        { Color: \"Green\", Hex: \"#B8E986\", RGB: RGBA(184, 233, 134, 1) },\r\n        { Color: \"Red\", Hex: \"#FF7373\", RGB: RGBA(255, 115, 115, 1)},\r\n        { Color: \"Pink\", Hex: \"#d14a77\", RGB: RGBA(209, 74, 119, 1) },\r\n        { Color: \"Dark Green\", Hex: \"#417505\", RGB: RGBA(65, 117, 5, 1) },\r\n        { Color: \"Dark Red\", Hex: \"#d0021a\", RGB: RGBA(208, 2, 27, 1) },\r\n        { Color: \"Error Primary\", Hex: \"#d0021a\", RGB: RGBA(208, 2, 26, 1) },\r\n        { Color: \"Error Secondary\", Hex: \"#f2dfe7\", RGB: RGBA(242, 223, 231, 1) }\r\n    ),\r\n\r\n    // Language options within the app\r\n    ClearCollect(LanguageOptions, { Language: \"English\", ShortHand: \"en\" }, { Language: \"Français\", ShortHand: \"fr\" }),\r\n\r\n    //Set App Height Breakpoints for responsive application resizing\r\n    Set(AppHeightBreakpoints, {Small: Value(App.DesignHeight * 0.75), Medium: Value(App.DesignHeight), Large: Value(App.DesignHeight * 1.25)}),\r\n\r\n    Set(\r\n        gblAppUserDetails,\r\n        Office365Users.MyProfileV2()\r\n    ),\r\n\r\n    //Loading spinner base time\r\n    Set(\r\n        gblBaseLoadTime, \r\n        100000 //100 seconds\r\n    ), \r\n\r\n    //Loading spinner delay\r\n    Set(\r\n        gblSpinnerLoadingDelay, \r\n        500 // 1/2 second\r\n    ),\r\n\r\n    Set(\r\n        gblFeedbackDisplayDelay,\r\n        5000 //5 seconds\r\n    ); \r\n\r\n    //Setting maximum personal bookings per day\r\n    Set(gblMaxBookingsPPPD, 1), //PPPD = Per Person Per Day\r\n\r\n    //Setting the state of the on-start error tracker\r\n    Set(gblIsAppStartUpErrorModalVisible, false),\r\n\r\n    //Setting the default My Bookings Filter\r\n    Set(gblMyBookingsFilter, \"TODAY\")\r\n);\r\n\r\n//Used for Test Studio users\r\nIfError(\r\n    If(LookUp(Users, user_email = Lower(gblAppUserDetails.mail), tester),\r\n        Navigate('Test Screen-NotVisible')\r\n    ),\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n        {   user_email: Lower(gblAppUserDetails.mail), \r\n            error_code: First(Errors(Users)).Error,\r\n            error_message: First(Errors(Users)).Message, \r\n            error_log: \"LookUp(Users, user_email = Lower(gblAppUserDetails.mail), tester)\",\r\n            error_origin: \"App OnStart\" \r\n        }\r\n    ),\r\n    false\r\n);\r\n\r\n//Start splash screen timer\r\nConcurrent(\r\n    Set(gblStartSplashScreenTimer, true),\r\n    Set(gblSplashScreenTimerDuration, 100000000)\r\n);\r\n\r\n//Get and locally set the 'gblAppUserLang' for the user's preferred app language\r\nIfError(\r\n    Set(gblAppUserLang,\r\n        If(\r\n            LookUp(\r\n                Users,\r\n                user_email = Lower(gblAppUserDetails.mail),\r\n                language.Value\r\n            ) = \"Français\",\r\n            \"fr\",\r\n            \"en\"\r\n        )\r\n    ),\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n        {   user_email: Lower(gblAppUserDetails.mail), \r\n            error_code: First(Errors(Users)).Error,\r\n            error_message: First(Errors(Users)).Message, \r\n            error_log: \"LookUp( Users, user_email = Lower(gblAppUserDetails.mail), language.Value )\",\r\n            error_origin: \"App OnStart\" \r\n        }\r\n    ),\r\n    {}\r\n);\r\n\r\n//Get and locally set the 'ALL DAY' timeslot's ID\r\nIfError(\r\n    Set(gblAllDayTimeslotID, LookUp(Timeslots, clock_time_to_min = 360 && end_time_in_min = 1080, ID)),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n        {   user_email: Lower(gblAppUserDetails.mail), \r\n            error_code: First(Errors(Timeslots)).Error,\r\n            error_message: First(Errors(Timeslots)).Message, \r\n            error_log: \"LookUp(Timeslots, start_time_in_min = 360 && end_time_in_min = 1080, ID)\",\r\n            error_origin: \"App OnStart\" \r\n        }\r\n    ),\r\n    {}\r\n);\r\n\r\n//Store static Sharepoint Lists locally - prevent querying the table however # times there are results in the gallery\r\nIfError(\r\n    Concurrent(\r\n        ClearCollect(colSeatingTypeTable, SeatingTypes),\r\n        ClearCollect(colSeatingArrangementTable, SeatingArrangements),\r\n        ClearCollect(colTranslationTable, Translations),\r\n        ClearCollect(colTimeslots, Timeslots)\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n\r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n        {   user_email: Lower(gblAppUserDetails.mail), \r\n            error_code: If(IsEmpty(Errors(SeatingTypes)), If(IsEmpty(Errors(SeatingArrangements)), If(IsEmpty(Errors(Translations)), First(Errors(Timeslots)).Error, First(Errors(Translations)).Error), First(Errors(SeatingArrangements)).Error), First(Errors(SeatingTypes)).Error),\r\n            error_message: If(IsEmpty(Errors(SeatingTypes)), If(IsEmpty(Errors(SeatingArrangements)), If(IsEmpty(Errors(Translations)), First(Errors(Timeslots)).Message, First(Errors(Translations)).Message), First(Errors(SeatingArrangements)).Message), First(Errors(SeatingTypes)).Message), \r\n            error_log: \"Concurrent(ClearCollect(colSeatingTypeTable, SeatingTypes)) ...\", \r\n            error_origin: \"App OnStart\" \r\n        }\r\n    ),\r\n    {}\r\n);\r\n\r\n//Load the default Search Page text\r\nConcurrent(\r\n        Set(gblRegionDefaultText, LookUp(colTranslationTable, key = \"bookingsearch.region.default\" && language.Value = gblAppUserLang, text)),\r\n        Set(gblBuildingDefaultText, LookUp(colTranslationTable, key = \"bookingsearch.building.default\" && language.Value = gblAppUserLang, text)),\r\n        Set(gblFloorDefaultText, LookUp(colTranslationTable, key = \"bookingsearch.floor.default\" && language.Value = gblAppUserLang, text)),\r\n        Set(gblNeighbourhoodDefaultText, LookUp(colTranslationTable, key = \"bookingsearch.neighbourhood.default\" && language.Value = gblAppUserLang, text)),\r\n        Set(gblSeatingTypeDefaultText, LookUp(colTranslationTable, key = \"bookingsearch.seatingtype.default\" && language.Value = gblAppUserLang, text ))\r\n);\r\n\r\n//Load Splash Screen Assets\r\nIfError(\r\n    Concurrent(\r\n        //If it's the user's first time using the app they will see the welcome card\r\n        //If user exists in the Users table the welcome card isn't displayed\r\n        Set(gblIsFirstTimeLoad, IsBlank(LookUp(Users, user_email = Lower(gblAppUserDetails.mail)))),\r\n        \r\n        //Retrieve the splash screen app text from Sharepoint\r\n        Set(gblAppHint, LookUp( colTranslationTable, key = \"splashscreen.card.hint\" && language.Value = Switch(IsBlank(gblAppUserLang), true, First(LanguageOptions).ShortHand, gblAppUserLang), text))\r\n    ),\r\n    //If there's an error show the component (error modal)\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n        {   user_email: Lower(gblAppUserDetails.mail), \r\n            error_code: First(Errors(Users)).Error,\r\n            error_message: First(Errors(Users)).Message, \r\n            error_log: \"LookUp(Users, user_email = Lower(gblAppUserDetails.mail)))\",\r\n            error_origin: \"App OnStart\" \r\n        }\r\n    ),\r\n    false\r\n);\r\n\r\n//  -- SEARCH PAGE -- \r\n//Load Region Table to speed up Search Page\r\nIfError(\r\n    //1. Retreive ID Column \r\n    //2. Conditionally Retrieve Building Columns Based on Language\r\n    //3. Insert Placeholder \"Select Your ...\" into 2.\r\n    ClearCollect(\r\n        colSearch_AllRegions,\r\n        Regions\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n\r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n        {   user_email: Lower(gblAppUserDetails.mail), \r\n            error_code: First(Errors(Regions)).Error,\r\n            error_message: First(Errors(Regions)).Message,\r\n            error_log: \"ClearCollect(colSearch_Regions, ...)\", \r\n            error_origin: \"App OnStart\" \r\n        }\r\n    ),\r\n    {}\r\n);\r\n\r\n//Store the Seating Arrangement Filter State\r\nClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));\r\n\r\n//  -- MY BOOKINGS PAGE -- \r\n//Get My Bookings\r\n\r\nIfError(\r\n    //Get all of my bookings within past 30 days and next 7 days (acc. to the default state of colMyBookingsFilter)\r\n    ClearCollect(\r\n        colMyBookings_Results,\r\n            AddColumns(\r\n                AddColumns(\r\n                    Filter(\r\n                            Reservations,\r\n                            user_email = Lower(gblAppUserDetails.mail) || proxy_user_email = Lower(gblAppUserDetails.mail),\r\n                            (start_date >= DateAdd(Today(), -30) && start_date <= DateAdd(Today(), 7))\r\n                    ),\r\n                    \"desk_id_value\",\r\n                    Value(desk_id.Value),\r\n                    \"booking_for\",\r\n                    If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),\r\n                        //If there's a non-blank user_email and a non-blank proxy_user_email the booking is for the user_email   \r\n                        First(Office365Users.SearchUserV2({searchTerm: ThisRecord.user_email}).value),\r\n                        Blank()\r\n                    ),\r\n                    \"booking_by\",\r\n                    If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),\r\n                        //If there's a non-blank user_email and a non-blank proxy_user_email the booking is by the proxy_user_email   \r\n                        First(Office365Users.SearchUserV2({searchTerm: ThisRecord.proxy_user_email}).value),\r\n\r\n                        \r\n                        If(!IsBlank(ThisRecord.user_email) && IsBlank(ThisRecord.proxy_user_email),\r\n                            //If there's a non-blank user_email and a blank proxy_user_email the booking is by the user_email\r\n                            First(Office365Users.SearchUserV2({searchTerm: ThisRecord.user_email}).value),\r\n                            Blank()\r\n                        )\r\n                    )\r\n                ),\r\n            \"booking_for_by_result\",\r\n            If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),\r\n                If(ThisRecord.user_email = Lower(gblAppUserDetails.mail),\r\n                    //Booking is for active user and was booked by someone else\r\n                    ThisRecord.booking_by.GivenName & \" \" & ThisRecord.booking_by.Surname & \" (\" & Lower(ThisRecord.booking_by.Mail) & \")\",\r\n                    \r\n                    If(ThisRecord.proxy_user_email = Lower(gblAppUserDetails.mail),\r\n                        //Booking is for someone else, booked by active user\r\n                        ThisRecord.booking_for.GivenName & \" \" & ThisRecord.booking_for.Surname & \" (\" & Lower(ThisRecord.booking_for.Mail) & \")\",\r\n                        \"\"\r\n                    )\r\n                )\r\n            ),\r\n            \"booking_for_by_en\",\r\n            If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),\r\n                    If(ThisRecord.user_email = Lower(gblAppUserDetails.mail),\r\n                        //Booking is for active user and was booked by someone else\r\n                        LookUp(colTranslationTable, key = \"mybookings.card.bookedby\" && language.Value = \"en\", text),\r\n                        \r\n                        If(ThisRecord.proxy_user_email = Lower(gblAppUserDetails.mail),\r\n                            //Booking is for someone else, booked by active user\r\n                            LookUp(colTranslationTable, key = \"mybookings.card.bookedfor\" && language.Value = \"en\", text)\r\n                        )\r\n                    )\r\n\r\n            ),\r\n            \"booking_for_by_fr\",\r\n            If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),\r\n                    If(ThisRecord.user_email = Lower(gblAppUserDetails.mail),\r\n                        //Booking is for active user and was booked by someone else\r\n                        LookUp(colTranslationTable, key = \"mybookings.card.bookedby\" && language.Value = \"fr\", text),\r\n                        \r\n                        If(ThisRecord.proxy_user_email = Lower(gblAppUserDetails.mail),\r\n                            //Booking is for someone else, booked by active user\r\n                            LookUp(colTranslationTable, key = \"mybookings.card.bookedfor\" && language.Value = \"fr\", text)\r\n                        )\r\n                    )\r\n\r\n            )\r\n        )\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n    {   user_email: Lower(gblAppUserDetails.mail), \r\n        error_code: First(Errors(Reservations)).Error,\r\n        error_message: First(Errors(Reservations)).Message, \r\n        error_log: \"Filter(Reservations...)\",\r\n        error_origin: \"App OnStart\" \r\n    }),\r\n    {}\r\n);\r\n\r\n//Get distinct desk info for my bookings\r\nIfError(\r\n    ClearCollect(\r\n        colMyBookings_Desks,\r\n        ForAll(\r\n            Distinct(\r\n                colMyBookings_Results,\r\n                desk_id_value\r\n            ) As unique_desk_id,\r\n            LookUp(AddColumns(AddColumns(Desks, \"building_id_value\", building_id.Id),\"neighbourhood_id_value\", neighbourhood_id.Id), ID = unique_desk_id.Result)\r\n        )\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n    {   user_email: Lower(gblAppUserDetails.mail), \r\n        error_code: First(Errors(Desks)).Error,\r\n        error_message: First(Errors(Desks)).Message, \r\n        error_log: \"LookUp(AddColumns(AddColumns(Desks, 'building_id_value', building_id.Id) ...))\",\r\n        error_origin: \"App OnStart\" \r\n    }),\r\n    Table()\r\n);\r\n\r\n//Get distinct building info for my bookings\r\nIfError(\r\n    ClearCollect(\r\n        colMyBookings_Buildings,\r\n        ForAll(\r\n            Distinct(\r\n                colMyBookings_Desks,\r\n                Value(building_id.Value)\r\n            ) As unique_building_id,\r\n            LookUp(\r\n                Buildings,\r\n                ID = unique_building_id.Result\r\n            )\r\n        )\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n    {   user_email: Lower(gblAppUserDetails.mail), \r\n        error_code: First(Errors(Buildings)).Error,\r\n        error_message: First(Errors(Buildings)).Message, \r\n        error_log: \"LookUp( Buildings, ID = unique_building_id.Result )\",\r\n        error_origin: \"App OnStart\" \r\n    }),\r\n    Table()\r\n);\r\n\r\n\r\n\r\n//Get distinct neighbourhoods info for my bookings\r\nIfError(\r\n    ClearCollect(\r\n        colMyBookings_Neighbourhoods,\r\n        ForAll(\r\n            Distinct(\r\n                colMyBookings_Desks,\r\n                Value(neighbourhood_id.Value)\r\n            ) As unique_neighbourhood_id,\r\n            LookUp(AddColumns(Neighbourhoods, \"floor_id_value\", floor_id.Id), ID = unique_neighbourhood_id.Result)\r\n        )\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n    {   user_email: Lower(gblAppUserDetails.mail), \r\n        error_code: First(Errors(Neighbourhoods)).Error,\r\n        error_message: First(Errors(Neighbourhoods)).Message, \r\n        error_log: \"LookUp( Neighbourhoods, ID = unique_neighbourhood_id.Result )\",\r\n        error_origin: \"App OnStart\" \r\n    }),\r\n    {}\r\n);\r\n\r\n\r\n//Get distinct floor info for my bookings\r\nIfError(\r\n    ClearCollect(\r\n        colMyBookings_Floors,\r\n        ForAll(\r\n            Distinct(\r\n                colMyBookings_Neighbourhoods,\r\n                Value(floor_id.Value)\r\n            ) As unique_floor_id,\r\n            LookUp(\r\n                Floors,\r\n                ID = unique_floor_id.Result\r\n            )\r\n        )\r\n    ),\r\n\r\n    //If there's an error show the component (error modal) on the splash screen\r\n    Set(gblIsAppStartUpErrorModalVisible, true);\r\n    \r\n    //If there's an error also try to patch the error details to the Sharepoint Error list\r\n    Patch(ExternalErrors, Defaults(ExternalErrors), \r\n    {   user_email: Lower(gblAppUserDetails.mail), \r\n        error_code: First(Errors(Floors)).Error,\r\n        error_message: First(Errors(Floors)).Message, \r\n        error_log: \"LookUp( Floors, ID = unique_floor_id.Result )\",\r\n        error_origin: \"App OnStart\" \r\n    }),\r\n    {}\r\n);\r\n\r\n//Stop splash screen timer\r\nSet(gblSplashScreenTimerDuration, 2500); //Delay navigation (if not first time load) for 3 more seconds",
        "InvariantPropertyName": "OnStart",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "ConfirmExitMessage",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "StartScreen",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      }
    ],
    "IsAutoGenerated": false,
    "IsComponentDefinition": false,
    "IsDataControl": true,
    "IsFromScreenLayout": false,
    "IsGroupControl": false,
    "IsLocked": false,
    "LayoutName": "",
    "MetaDataIDKey": "",
    "Name": "App",
    "ParentIndex": 0,
    "PersistMetaDataIDKey": false,
    "Properties": [
      {
        "Category": "Data",
        "PropertyName": "ConfirmExit",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Data",
        "PropertyName": "BackEnabled",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Data",
        "PropertyName": "ConfirmExitMessage",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "PropertyName": "MinScreenHeight",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "PropertyName": "MinScreenWidth",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Behavior",
        "PropertyName": "OnStart",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "ConstantData",
        "PropertyName": "SizeBreakpoints",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "OnDemandData",
        "PropertyName": "StartScreen",
        "RuleProviderType": "Unknown"
      }
    ],
    "StyleName": "",
    "Type": "ControlInfo"
  }
}