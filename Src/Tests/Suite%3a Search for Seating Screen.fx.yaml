"'13323978-d4f3-40e1-a06a-a93f93e53c73' As TestSuite":
    Description: =""
    DisplayName: |-
        ="Suite: Search for Seating Screen"

    "'f1e34d76-8b02-44a4-b9ed-7c7485a7ed70' As TestCase":
        Description: ="Ensuring the Search button is disabled on page load"
        DisplayName: |-
            ="Case: Disabled Search Btn By Default"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Search Btn is still disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

    "'eac8bdeb-cdfc-4ee2-89dd-67fa4f2a37d3' As TestCase":
        Description: ="Ensuring the Search button is disabled if there is a past date error"
        DisplayName: |-
            ="Case: Disabled Search Btn Past Date Error"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Search Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select Yesterday's Date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(DateAdd(Today(), -1), "yyyy-mm-dd"))

        Step8 As TestStep:
            Description: ="Verify Search Btn is disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step9 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

    "'2dfaba99-b9d6-496b-ad95-57699d5a1cd0' As TestCase":
        Description: |-
            ="Ensuring the Search button is disabled until: a region, building, floor, a neighbourhood, seating type, date, and time range is selected"
        DisplayName: |-
            ="Case: Disabled Search Btn Select Fields"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step3 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Verify Search Btn is still disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step5 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Verify Search Btn is still disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step7 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify Search Btn is still disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step9 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step10 As TestStep:
            Description: ="Verify Search Btn is still disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step11 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step12 As TestStep:
            Description: ="Verify Search Btn is still disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step13 As TestStep:
            Description: ="Select Date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(Today(), "yyyy-mm-dd"))

        Step14 As TestStep:
            Description: ="Verify time range is selected by default when date is chosen (MVP)"
            Screen: =Search Screen
            Value: |-
                =Assert(drpTimeRange.SelectedText.Value = "ALL DAY", "[Expected] : true , {Actual} : " & drpTimeRange.SelectedText.Value)

        Step2 As TestStep:
            Description: ="Verify Search Btn is enabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Edit)

        Step15 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

    "'e32126ef-d5f0-40b1-a6a0-2b7168db056d' As TestCase":
        Description: |-
            ="Ensuring the Search button is disabled until: a region, building, floor, a neighbourhood, seating type, date, and time range is selected"
        DisplayName: |-
            ="Case: Disabled Search Btn Upon Clear All"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(Today(), "yyyy-mm-dd"))

        Step3 As TestStep:
            Description: ="Verify Search Btn is enabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Edit)

        Step9 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

        Step10 As TestStep:
            Description: ="Verify Search Btn is disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

    "'e9f6c04f-39ff-42db-a340-78d929c5f949' As TestCase":
        Description: ="Ensuring the Search button is disabled if there is a future (> 7 days) date error"
        DisplayName: |-
            ="Case: Disabled Search Btn Future (> 7 days) Date Error"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select Date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(DateAdd(Today(), 8), "yyyy-mm-dd"))

        Step8 As TestStep:
            Description: ="Verify Search Btn is disabled"
            Screen: =Search Screen
            Value: =Assert(btnSearch.DisplayMode = DisplayMode.Disabled)

        Step9 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

    "'10244818-5f9b-4f62-8075-263a553fe405' As TestCase":
        Description: ="Ensuring the Clear All button clears all fields if the fields are populated"
        DisplayName: |-
            ="Case: Clear All - One Selection"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step3 As TestStep:
            Description: ="Verify Region Dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpRegion.SelectedText.Value = LookUp(colTranslationTable, key = "bookingsearch.region.default" && language.Value = gblAppUserLang, text))

        Step2 As TestStep:
            Description: ="Verify Building Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpBuilding.SelectedText.Value = Blank())

        Step4 As TestStep:
            Description: ="Verify Floor Dropdown is empty"
            Value: =Assert(drpFloor.SelectedText.Value = Blank())

        Step5 As TestStep:
            Description: ="Verify Neighbourhood Dropdown is empty"
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step6 As TestStep:
            Description: ="Verify Seating Type Dropdown is empty"
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step7 As TestStep:
            Description: ="Verify Date Dropdown is empty"
            Value: =Assert(txtDatePickerInput.Text = "")

        Step8 As TestStep:
            Description: ="Verify Time Range Dropdown is empty"
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step9 As TestStep:
            Description: ="Verify that Clear All is enabled"
            Screen: =Search Screen
            Value: =Assert(lblClearAll.DisplayMode = DisplayMode.Disabled)

        Step10 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step11 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

        Step12 As TestStep:
            Description: ="Verify that Clear All reset the one changed field"
            Value: =Assert(drpRegion.SelectedText.Value = LookUp(Translations, key = "bookingsearch.region.default" && language.Value = gblAppUserLang, text))

    "'c80fcb2b-73d2-4da2-96a6-306086f96e40' As TestCase":
        Description: ="Ensuring the Clear All button clears all fields if the fields are populated"
        DisplayName: |-
            ="Case: Clear All - Multiple Selections"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Region Dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpRegion.SelectedText.Value = LookUp(Translations, key = "bookingsearch.region.default" && language.Value = gblAppUserLang, text))

        Step3 As TestStep:
            Description: ="Verify Building Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpBuilding.SelectedText.Value = Blank())

        Step4 As TestStep:
            Description: ="Verify Floor Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpFloor.SelectedText.Value = Blank())

        Step5 As TestStep:
            Description: ="Verify Neighbourhood Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step6 As TestStep:
            Description: ="Verify Seating Type Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step7 As TestStep:
            Description: ="Verify Date Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = Blank())

        Step8 As TestStep:
            Description: ="Verify Time Range Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step9 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step13 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step14 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step15 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step16 As TestStep:
            Description: ="Select Seating Type"
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step18 As TestStep:
            Description: ="Select Date"
            Value: =SetProperty(txtDatePickerInput.Text, Text(Today(), "yyyy-mm-dd"))

        Step17 As TestStep:
            Description: ="Select Time Range"
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step10 As TestStep:
            Description: ="Verify that Clear All is enabled"
            Screen: =Search Screen
            Value: =Assert(lblClearAll.DisplayMode = DisplayMode.Edit)

        Step11 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

        Step12 As TestStep:
            Description: ="Verify that Clear All reset the Region to default text"
            Screen: =Search Screen
            Value: =Assert(drpRegion.SelectedText.Value = LookUp(Translations, key = "bookingsearch.region.default" && language.Value = gblAppUserLang, text))

        Step19 As TestStep:
            Description: ="Verify that Clear All cleared the Building"
            Value: =Assert(drpBuilding.SelectedText.Value = Blank())

        Step20 As TestStep:
            Description: ="Verify that Clear All cleared the Floor"
            Value: =Assert(drpFloor.SelectedText.Value = Blank())

        Step21 As TestStep:
            Description: ="Verify that Clear All cleared the Neighbourhood"
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step22 As TestStep:
            Description: ="Verify that Clear All cleared the Seating Type"
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step23 As TestStep:
            Description: ="Verify that Clear All cleared the Date"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = Blank())

        Step24 As TestStep:
            Description: ="Verify that Clear All cleared the Time Range"
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

    "'cb438f71-0c25-4886-8466-a98d79884cc0' As TestCase":
        Description: ="Ensuring the Clear All button clears all fields if the fields are populated"
        DisplayName: |-
            ="Case: Date Errors - Cannot Book Dates Beyond 7 Days"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select 8 days in the future from today's date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(DateAdd(Today(), 8),"yyyy-mm-dd"))

        Step8 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.date.error.future" && language.Value = gblAppUserLang, text))

        Step9 As TestStep:
            Description: ="Select 1 month in the future from today's date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(DateAdd(Today(), 30),"yyyy-mm-dd"))

        Step10 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.date.error.future" && language.Value = gblAppUserLang, text))

        Step11 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'889128d4-d11c-4028-a6d1-9505d36afdcf' As TestCase":
        Description: ="Ensuring the Clear All button clears all fields if the fields are populated"
        DisplayName: |-
            ="Case: Date Errors - Cannot Book Dates Before Today"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select Yesterday's Date"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Text(DateAdd(Today(), -1), "yyyy-mm-dd"))

        Step8 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.date.error.past" && language.Value = gblAppUserLang, text))

        Step9 As TestStep:
            Description: ="Select a one year in the past"
            Value: =SetProperty(txtDatePickerInput.Text, Text(DateAdd(Today(), -365), "yyyy-mm-dd"))

        Step10 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.date.error.past" && language.Value = gblAppUserLang, text))

        Step11 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'cd5560fd-256d-4e22-8a01-f422f8be8cc8' As TestCase":
        Description: ="Ensuring an error is displayed for an invalid month (a number greater than 12 or less than 1)"
        DisplayName: |-
            ="Case: Date Errors - Invalid Month"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select an invalid month (greater than 12)"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & 13 & "-" & Day(Today()))

        Step8 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.invalidmonth" && language.Value = gblAppUserLang, text))

        Step10 As TestStep:
            Description: ="Select an invalid month (less than 1)"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & 0 & "-" & Day(Today()))

        Step9 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'66a12a34-ed36-4b17-a406-293e12b8cca2' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Verify Results Found - Region Dropdown"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Region dropdown has data"
            Screen: =Search Screen
            Value: =Assert(CountRows(Filter(colSearch_Regions, ID >= 1).ID) > 0)

    "'b5c0df82-bbaa-4d69-b881-014875f1bbc9' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Verify Results Found - Building Dropdown"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Building (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Verify Building dropdown has data"
            Screen: =Search Screen
            Value: =Assert(CountRows(Filter(colSearch_Buildings, ID >= 1).ID) > 0)

        Step5 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'346997ff-67c0-4281-86bf-6e8a1f354ed6' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Verify Results Found - Floor Dropdown"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Floor (prime the datasource)"
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Verify Floor dropdown has data"
            Screen: =Search Screen
            Value: =Assert(CountRows(Filter(colSearch_Floors, ID >= 1).ID) > 0)

        Step6 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'1136fa01-1d80-4671-9cbc-8ef96b6179d9' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Verify Results Found - Neighbourhood Dropdown"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Neighbourhood (prime the datasource)"
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Verify Neighbourhood dropdown has data"
            Screen: =Search Screen
            Value: =Assert(CountRows(Filter(colSearch_Neighbourhoods, ID >= 1).ID) > 0)

        Step7 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'e6e51729-2f9d-4551-accc-2c1e932be376' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Verify Results Found - Seating Type Dropdown"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Seating Type (prime the datasource)"
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Verify Seating Type dropdown has data"
            Screen: =Search Screen
            Value: =Assert(CountRows(Filter(colSearch_SeatingTypes, ID >= 1).ID) > 0)

        Step8 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'62f4dc6f-8f00-4fa1-a24c-5bfba4fe59e0' As TestCase":
        Description: ="[MVP REQ] Only one Time Range option, ALL DAY"
        DisplayName: |-
            ="Case: Verify Results Found - Time Range Dropdown"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Seating Type (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Select a Time Range (prime the datasource)"
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Verify Time Range dropdown has data"
            Screen: =Search Screen
            Value: =Assert(CountRows(Filter(colSearch_TimeRanges, ID >= 1).ID) = 1)

        Step9 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'db9093f7-6cd1-4e17-a917-76a7767feb58' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Dependent Dropdown - Building dep. on Region"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step5 As TestStep:
            Description: ="Verify Building dropdown is empty"
            Value: =Assert(drpBuilding.SelectedText.Value = Blank())

        Step3 As TestStep:
            Description: ="Verify Building dropdown is disabled"
            Value: =Assert(drpBuilding.DisplayMode = DisplayMode.Disabled)

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Verify Building dropdown is enabled"
            Value: =Assert(drpBuilding.DisplayMode = DisplayMode.Edit)

        Step6 As TestStep:
            Description: ="Verify Building dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpBuilding.SelectedText.Value = LookUp(colTranslationTable, key = "bookingsearch.building.default" && language.Value = gblAppUserLang, text))

        Step7 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'67067d13-7559-41cb-a832-b2f24244b15b' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Dependent Dropdown - Floor dep. on Building"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Floor dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpFloor.SelectedText.Value = Blank())

        Step3 As TestStep:
            Description: ="Verify Floor dropdown is disabled"
            Screen: =Search Screen
            Value: =Assert(drpFloor.DisplayMode = DisplayMode.Disabled)

        Step4 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify Floor dropdown is empty"
            Value: =Assert(drpFloor.SelectedText.Value = Blank())

        Step9 As TestStep:
            Description: ="Verify Floor dropdown is disabled"
            Value: =Assert(drpFloor.DisplayMode = DisplayMode.Disabled)

        Step7 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Verify Floor dropdown is enabled"
            Screen: =Search Screen
            Value: =Assert(drpFloor.DisplayMode = DisplayMode.Edit)

        Step6 As TestStep:
            Description: ="Verify Floor dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpFloor.SelectedText.Value = LookUp(colTranslationTable, key = "bookingsearch.floor.default" && language.Value = gblAppUserLang, text))

        Step10 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'5763c072-9d0f-4833-8836-dd70a022aa7f' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Dependent Dropdown - Neighbourhood dep. on Floor"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step3 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.DisplayMode = DisplayMode.Disabled)

        Step4 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step6 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.DisplayMode = DisplayMode.Disabled)

        Step7 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step10 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Value: =Assert(drpNeighbourhood.DisplayMode = DisplayMode.Disabled)

        Step11 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step12 As TestStep:
            Description: ="Verify Neighbourhood dropdown is enabled"
            Value: =Assert(drpNeighbourhood.DisplayMode = DisplayMode.Edit)

        Step9 As TestStep:
            Description: ="Verify Neighbourhood dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpNeighbourhood.SelectedText.Value = LookUp(colTranslationTable, key = "bookingsearch.neighbourhood.default" && language.Value = gblAppUserLang, text))

        Step13 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'33f7705c-3f84-4137-9913-a968ae91b100' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Dependent Dropdown - Seating Type dep. on Neighbourhood"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step3 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.DisplayMode = DisplayMode.Disabled)

        Step4 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step6 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.DisplayMode = DisplayMode.Disabled)

        Step7 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step9 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.DisplayMode = DisplayMode.Disabled)

        Step10 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step13 As TestStep:
            Description: ="Verify Neighbourhood dropdown is empty"
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step14 As TestStep:
            Description: ="Verify Neighbourhood dropdown is disabled"
            Value: =Assert(drpSeatingType.DisplayMode = DisplayMode.Disabled)

        Step15 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step11 As TestStep:
            Description: ="Verify Seating Type dropdown is enabled"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.DisplayMode = DisplayMode.Edit)

        Step12 As TestStep:
            Description: ="Verify Seating Type dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpSeatingType.SelectedText.Value = LookUp(colTranslationTable, key = "bookingsearch.seatingtype.default" && language.Value = gblAppUserLang, text))

        Step16 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'91047d1f-5387-4acb-88d3-72db204f6ccd' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: Dependent Dropdown - Date dep. on Seating Type"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify the Date picker is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = "")

        Step3 As TestStep:
            Description: ="Verify the Date picker is disabled"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.DisplayMode = DisplayMode.Disabled)

        Step4 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Verify the Date picker is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = "")

        Step6 As TestStep:
            Description: ="Verify the Date picker is disabled"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.DisplayMode = DisplayMode.Disabled)

        Step7 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify the Date picker is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = "")

        Step9 As TestStep:
            Description: ="Verify the Date picker is disabled"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.DisplayMode = DisplayMode.Disabled)

        Step10 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step11 As TestStep:
            Description: ="Verify the Date picker is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = "")

        Step12 As TestStep:
            Description: ="Verify the Date picker is disabled"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.DisplayMode = DisplayMode.Disabled)

        Step13 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step16 As TestStep:
            Description: ="Verify the Date picker is empty"
            Value: =Assert(txtDatePickerInput.Text = "")

        Step18 As TestStep:
            Description: ="Verify the Date picker is disabled"
            Value: =Assert(txtDatePickerInput.DisplayMode = DisplayMode.Disabled)

        Step17 As TestStep:
            Description: ="Select a Seating Type"
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step14 As TestStep:
            Description: ="Verify the Date picker is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.DisplayMode = DisplayMode.Edit)

        Step15 As TestStep:
            Description: ="Verify the Date picker is disabled"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = "")

        Step19 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'18d4e3f1-00ca-462a-98e4-623dc963c01a' As TestCase":
        Description: ="[MVP REQ] Only one Time Range option, ALL DAY"
        DisplayName: |-
            ="[COME BACK TO] Case: Dependent Dropdown - Time Range dep. on Seating Type"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify the Time Range is empty"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step3 As TestStep:
            Description: ="Verify the Time Range is disabled"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.DisplayMode = DisplayMode.Disabled)

        Step4 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Verify the Time Range is empty"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step6 As TestStep:
            Description: ="Verify the Time Range is disabled"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.DisplayMode = DisplayMode.Disabled)

        Step7 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify the Time Range is empty"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step9 As TestStep:
            Description: ="Verify the Time Range is disabled"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.DisplayMode = DisplayMode.Disabled)

        Step10 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step11 As TestStep:
            Description: ="Verify the Time Range is empty"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step12 As TestStep:
            Description: ="Verify the Time Range is disabled"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.DisplayMode = DisplayMode.Disabled)

        Step13 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step14 As TestStep:
            Description: ="Verify the Time Range is empty"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step15 As TestStep:
            Description: ="Verify the Time Range is disabled"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.DisplayMode = DisplayMode.Disabled)

        Step16 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step17 As TestStep:
            Description: ="Verify the Time Range is set to ALL DAY"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.SelectedText.Value = "ALL DAY")

        Step18 As TestStep:
            Description: ="Verify the Time Range is enabled"
            Screen: =Search Screen
            Value: =Assert(drpTimeRange.DisplayMode = DisplayMode.Edit)

        Step19 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

    "'a7d88994-4c51-4045-a775-5d5db2bd95ea' As TestCase":
        Description: ="Ensuring the Clear All button is disabled when no fields have been changed"
        DisplayName: |-
            ="Case: Clear All - No Selection - Clear is Disabled"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Search Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Verify Region Dropdown is set to default text"
            Screen: =Search Screen
            Value: =Assert(drpRegion.SelectedText.Value = LookUp(colTranslationTable, key = "bookingsearch.region.default" && language.Value = gblAppUserLang, text))

        Step3 As TestStep:
            Description: ="Verify Building Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(drpBuilding.SelectedText.Value = Blank())

        Step4 As TestStep:
            Description: ="Verify Floor Dropdown is empty"
            Value: =Assert(drpFloor.SelectedText.Value = Blank())

        Step5 As TestStep:
            Description: ="Verify Neighbourhood Dropdown is empty"
            Value: =Assert(drpNeighbourhood.SelectedText.Value = Blank())

        Step6 As TestStep:
            Description: ="Verify Seating Type Dropdown is empty"
            Value: =Assert(drpSeatingType.SelectedText.Value = Blank())

        Step7 As TestStep:
            Description: ="Verify Date Dropdown is empty"
            Screen: =Search Screen
            Value: =Assert(txtDatePickerInput.Text = "")

        Step8 As TestStep:
            Description: ="Verify Time Range Dropdown is empty"
            Value: =Assert(drpTimeRange.SelectedText.Value = Blank())

        Step9 As TestStep:
            Description: ="Verify that Clear All is disabled"
            Screen: =Search Screen
            Value: =Assert(lblClearAll.DisplayMode = DisplayMode.Disabled)

    "'8c226665-a1f1-453e-907b-d2ee16cbf5ae' As TestCase":
        Description: =""
        DisplayName: |-
            ="Case: View Seating Types from Search for Seating Screen"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Value: =Navigate('Search Screen')

        Step3 As TestStep:
            Description: ="Select the Preview Seating Types link"
            Value: =Select(lblPreviewSeatingTypes)

        Step2 As TestStep:
            Description: ="Verify the redirection to the Seating types page"
            Value: =Assert(App.ActiveScreen = 'Seating Types Screen')

    "'2df5df45-e447-42bc-a52d-91c4748b9867' As TestCase":
        Description: ="Select region, building, floor, neighbourhood, and verify that Any is an option when selecting Seating Types"
        DisplayName: |-
            ="Case: Any Option for Seating Types"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =My Profile Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood (prime the datasource)"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Verify the Seating Type dropdown has the ""All"" option"
            Screen: =Search Screen
            Value: |-
                =Assert(!IsEmpty(LookUp(colSearch_SeatingTypes, Result = LookUp(colTranslationTable, key = "bookingsearch.seatingtype.all" && language.Value = gblAppUserLang, text))), "Expected: true, Actual: " & !IsEmpty(LookUp(colSearch_SeatingTypes, Result = LookUp(colTranslationTable, key = "bookingsearch.seatingtype.all" && language.Value = gblAppUserLang, text))))

        Step6 As TestStep:
            Description: ="Select the All option from the Seating Type dropdown"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: LookUp(colSearch_SeatingTypes, Result = LookUp(colTranslationTable, key = "bookingsearch.seatingtype.any" && language.Value = gblAppUserLang, text)).Result })

        Step9 As TestStep:
            Description: ="Verify the selected Seating Type dropdown option"
            Screen: =Search Screen
            Value: |-
                =Assert(drpSeatingType.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BResult' = LookUp(colTranslationTable, key = "bookingsearch.seatingtype.any" && language.Value = gblAppUserLang, text), "Expected: true, Actual: " & Text(drpSeatingType.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BResult' = LookUp(colTranslationTable, key = "bookingsearch.seatingtype.any" && language.Value = gblAppUserLang, text)))

        Step7 As TestStep:
            Description: ="Select Clear All"
            Value: =Select(lblClearAll)

    "'203c088d-9f8c-4ea2-8abe-23c0f583ec97' As TestCase":
        Description: ="Ensuring an error is displayed for an invalid day (a number greater than 31 or less than 1)"
        DisplayName: |-
            ="Case: Date Errors - Invalid Day"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Search Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select an invalid day (greater than 32)"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & Month(Today()) & "-" & 32)

        Step8 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.invalidday" && language.Value = gblAppUserLang, text))

        Step9 As TestStep:
            Description: ="Select an invalid month (less than 1)"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & Month(Today()) & "-" & 0)

        Step10 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

    "'c4e955c1-f4f8-4e29-a30a-8a91fa81362f' As TestCase":
        Description: ="Ensuring an error is displayed for invalid formatting (ex. format should be Digit Digit Digit Digit Hyphen Digit Digit Hyphen Digit Digit)"
        DisplayName: |-
            ="Case: Date Errors - Invalid Format Non-digits"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Search Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Enter text into the year of the datefield"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, "XXXX" & "-" & Month(Today()) & "-" & Day(Today()))

        Step8 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step9 As TestStep:
            Description: ="Enter text into the month of the datefield"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & "XX" & "-" & Day(Today()))

        Step11 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step12 As TestStep:
            Description: ="Enter text into the day of the datefield"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & Month(Today()) & "-" & "XX")

        Step13 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step10 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

    "'89b2345f-ec20-453e-b6c1-0e5aca3f112e' As TestCase":
        Description: ="Ensuring an error is displayed for invalid formatting (ex. format should be Digit Digit Digit Digit Hyphen Digit Digit Hyphen Digit Digit)"
        DisplayName: |-
            ="Case: Date Errors - Invalid Format Non-hyphens as separators"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Splash Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Enter text into the first separator"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "X" & Month(Today()) & "-" & Day(Today()))

        Step8 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step9 As TestStep:
            Description: ="Enter text into the second separator"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & Month(Today()) & "X" & Day(Today()))

        Step10 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step20 As TestStep:
            Description: ="Enter text into the both separators"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "X" & Month(Today()) & "X" & Day(Today()))

        Step21 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step11 As TestStep:
            Description: ="Enter a number into the first separator"
            Screen: =Search Screen
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "1" & Month(Today()) & "-" & Day(Today()))

        Step12 As TestStep:
            Description: ="Verify Date Error is displayed"
            Screen: =Search Screen
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step14 As TestStep:
            Description: ="Enter a number into the second separator"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & Month(Today()) & "1" & Day(Today()))

        Step15 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step22 As TestStep:
            Description: ="Enter a number into the both separators"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "1" & Month(Today()) & "1" & Day(Today()))

        Step23 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step16 As TestStep:
            Description: ="Enter a symbol into the first separator"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "/" & Month(Today()) & "-" & Day(Today()))

        Step17 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step18 As TestStep:
            Description: ="Enter a symbol into the second separator"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "-" & Month(Today()) & "/" & Day(Today()))

        Step19 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step24 As TestStep:
            Description: ="Enter a symbol into the separators"
            Value: =SetProperty(txtDatePickerInput.Text, Year(Today()) & "/" & Month(Today()) & "/" & Day(Today()))

        Step25 As TestStep:
            Description: ="Verify Date Error is displayed"
            Value: =Assert(lblDateError.Text = LookUp(colTranslationTable, key = "bookingsearch.datepicker.keyboardinput" && language.Value = gblAppUserLang, text))

        Step13 As TestStep:
            Description: ="Select Clear All"
            Screen: =Search Screen
            Value: =Select(lblClearAll)

