"'e02c4905-e15f-4272-a1f7-a772ad2c993b' As TestSuite":
    Description: =""
    DisplayName: |-
        ="Suite: Confirm Booking Screen"

    "'3b26ac49-4702-4e6c-b809-9864e0ab4ee9' As TestCase":
        Description: ="Create a personal booking, pass it to the Confirm Booking page, verify Seating details"
        DisplayName: |-
            ="Case: [Personal Booking] Verify Booking Seating Details"

        Step1 As TestStep:
            Description: ="Create a personal reservation to test"
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step2 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('Confirm Booking Screen')

        Step4 As TestStep:
            Description: ="Verify the displayed seat is the reserved seat"
            Value: |-
                =Assert(First(colConfirmBooking_Result).desk_id.Id = LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, desk_id.Id), "Expected: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, desk_id.Id) & ", Actual: " & First(colConfirmBooking_Result).desk_id.Id)

        Step8 As TestStep:
            Description: ="Verify the displayed seat is stored in the local result collection"
            Value: |-
                =Assert(First(colConfirmBooking_Result).desk_id.Id = LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, ID), "Expected: " & First(colConfirmBooking_Result).desk_id.Id & ", Actual: " & LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, ID))

        Step9 As TestStep:
            Description: ="Verify the displayed workstation specifics is the same as the local result one"
            Value: |-
                =Assert(Concat(LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, workstation_specifics) As tag, tag.Value) = Concat(LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, workstation_specifics) As tag, tag.Value), "Expected: true, Actual: " & Text(Concat(LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, workstation_specifics) As tag, tag.Value) = Concat(LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, workstation_specifics) As tag, tag.Value)))

        Step5 As TestStep:
            Description: ="Verify the displayed seating type is the reserved seating type"
            Screen: =Confirm Booking Screen
            Value: |-
                =Assert(LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, seating_type_id.Id) = LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, seating_type_id.Id), "Expected: " & LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, seating_type_id).Id & ", Actual: " & LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, seating_type_id).Id)

        Step6 As TestStep:
            Description: ="Verify the displayed floor is the reserved floor"
            Value: |-
                =Assert(LookUp(colMyBookings_Neighbourhoods, ID = LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, neighbourhood_id.Id)).ID = LookUp(Neighbourhoods, ID = LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, neighbourhood_id.Id)).ID, "Expected: " & LookUp(Neighbourhoods, ID = LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, neighbourhood_id.Id)).ID & ", Actual: " & LookUp(colMyBookings_Neighbourhoods, ID = LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, neighbourhood_id.Id)).ID)

        Step7 As TestStep:
            Description: ="Verify the displayed building is the reserved building"
            Value: |-
                =Assert(LookUp(colMyBookings_Buildings, ID = LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, building_id.Id)).ID = LookUp(Buildings, ID = LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, building_id.Id)).ID, "Expected: " & LookUp(Buildings, ID = LookUp(Desks, ID = First(colConfirmBooking_Result).desk_id.Id, building_id.Id)).ID & ", Actual: " & LookUp(colMyBookings_Buildings, ID = LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, building_id.Id)).ID)

        Step3 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =Confirm Booking Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

    "'9fb36392-c37f-4d6c-b116-da276b63cbbf' As TestCase":
        Description: ="Create a personal booking, pass it to the Confirm Booking page, verify Booking details"
        DisplayName: |-
            ="Case: [Personal Booking] Verify Booking Details "

        Step1 As TestStep:
            Description: ="Create a personal reservation to test"
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step2 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('Confirm Booking Screen')

        Step3 As TestStep:
            Description: ="Verify the booking created is the one used on the confirm booking screen"
            Value: |-
                =Assert(!IsEmpty(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID)), "Expected: true, Actual: " & !IsEmpty(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID)))

        Step4 As TestStep:
            Description: ="Verify the displayed date is the reserved date"
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, start_date) = First(colConfirmBooking_Result).start_date, "Expected: " & First(colConfirmBooking_Result).start_date & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, start_date))

        Step5 As TestStep:
            Description: ="Verify the displayed timeslot is the reserved timeslot"
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, timeslot_id.Id) = First(colConfirmBooking_Result).timeslot_id.Id, "Expected: " & First(colConfirmBooking_Result).timeslot_id.Id & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, timeslot_id.Id))

        Step7 As TestStep:
            Description: ="Verify the stored booked by user is the reserved booked by user"
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, user_email) = First(colConfirmBooking_Result).user_email, "Expected: " & First(colConfirmBooking_Result).user_email & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, user_email))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =Confirm Booking Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

    "'243c0ee6-9548-4928-85c8-cd5ee1616cd9' As TestCase":
        Description: ="Create a outbound booking, pass it to the Confirm Booking page, verify Booking details"
        DisplayName: |-
            ="Case: [Outbound Booking] Verify Booking Details"

        Step1 As TestStep:
            Description: ="Create a outbound reservation to test"
            Screen: =Splash Screen
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: "fraydon.test@canada.ca", proxy_user_email: Lower(gblAppUserDetails.mail), start_date: DateAdd(Today(), 30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step2 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Search Screen
            Value: =Navigate('Confirm Booking Screen')

        Step3 As TestStep:
            Description: ="Verify the booking created is the one used on the confirm booking screen"
            Screen: =Confirm Booking Screen
            Value: |-
                =Assert(!IsEmpty(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID)), "Expected: true, Actual: " & !IsEmpty(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID)))

        Step4 As TestStep:
            Description: ="Verify the displayed date is the reserved date"
            Screen: =Confirm Booking Screen
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, start_date) = First(colConfirmBooking_Result).start_date, "Expected: " & First(colConfirmBooking_Result).start_date & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, start_date))

        Step5 As TestStep:
            Description: ="Verify the displayed timeslot is the reserved timeslot"
            Screen: =Confirm Booking Screen
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, timeslot_id.Id) = First(colConfirmBooking_Result).timeslot_id.Id, "Expected: " & First(colConfirmBooking_Result).timeslot_id.Id & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, timeslot_id.Id))

        Step7 As TestStep:
            Description: ="Verify the displayed booked by user is the reserved booked by user"
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, user_email) = First(colConfirmBooking_Result).user_email, "Expected: " & First(colConfirmBooking_Result).user_email & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, user_email))

        Step8 As TestStep:
            Description: ="Verify the displayed booked for user is the reserved booked for user"
            Screen: =Confirm Booking Screen
            Value: |-
                =Assert(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, proxy_user_email) = First(colConfirmBooking_Result).proxy_user_email, "Expected: " & First(colConfirmBooking_Result).proxy_user_email & ", Actual: " & LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, proxy_user_email))

        Step6 As TestStep:
            Description: ="Delete the outbound test reservation"
            Screen: =Confirm Booking Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

    "'07e2ffd9-d84f-4576-8eff-2eea212c0c06' As TestCase":
        Description: ="Create a personal booking, pass it to the Confirm Booking page, verify the functionality of the My Bookings button"
        DisplayName: |-
            ="Case: My Bookings Link"

        Step7 As TestStep:
            Description: ="Set testing user's reservations to zero to prevent issues"
            Value: |-
                =Patch(Users, LookUp(Users, user_email = Lower(gblAppUserDetails.mail)), { reservations_made_count: 0 });

        Step1 As TestStep:
            Description: ="Create a personal reservation to test"
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step2 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('Confirm Booking Screen')

        Step6 As TestStep:
            Description: ="Verify redirection to Confirm Booking Screen"
            Value: =Assert(App.ActiveScreen = 'Confirm Booking Screen')

        Step4 As TestStep:
            Description: ="Select the My Bookings button"
            Value: =Select(btnMyBookingsCBS)

        Step5 As TestStep:
            Description: ="Verify redirection to My Bookings"
            Screen: =My Bookings Screen
            Value: =Assert(App.ActiveScreen = 'My Bookings Screen')

        Step3 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =Confirm Booking Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

    "'c32341e0-d1c3-4958-b4cc-f90dbe6857d3' As TestCase":
        Description: ="Set my number of bookings to 1, create a personal booking, pass it to the Confirm Booking page, verify that feedback will be displayed"
        DisplayName: |-
            ="Case: Feedback displayed on First Booking"

        Step1 As TestStep:
            Description: ="Set testing user's reservations to one to artificially create booking"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Patch(Users, LookUp(Users, user_email = Lower(gblAppUserDetails.mail)), { reservations_made_count: 1 });

        Step2 As TestStep:
            Description: ="Create a personal reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step3 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('Confirm Booking Screen')

        Step4 As TestStep:
            Description: ="Verify redirection to Confirm Booking Screen"
            Screen: =Confirm Booking Screen
            Value: =Assert(App.ActiveScreen = 'Confirm Booking Screen')

        Step6 As TestStep:
            Description: ="Verify after 5 seconds the Feedback Modal is displayed"
            Value: |-
                =Assert(First(colConfirmBooking_Feedback).ShouldPromptFeedback = true, "Expected: true, Actual: " & First(colConfirmBooking_Feedback).ShouldPromptFeedback)

        Step5 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

    "'e489767d-a2c0-43d8-a3ae-161e54b528cb' As TestCase":
        Description: ="Set my number of bookings to 11 (10th booking), create a personal booking, pass it to the Confirm Booking page, verify that feedback will be displayed"
        DisplayName: |-
            ="Case: Feedback displayed on Every 10th Booking"

        Step1 As TestStep:
            Description: ="Set testing user's reservations to one to artificially create booking"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Patch(Users, LookUp(Users, user_email = Lower(gblAppUserDetails.mail)), { reservations_made_count: 11 });

        Step2 As TestStep:
            Description: ="Create a personal reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step3 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('Confirm Booking Screen')

        Step4 As TestStep:
            Description: ="Verify redirection to Confirm Booking Screen"
            Screen: =Confirm Booking Screen
            Value: =Assert(App.ActiveScreen = 'Confirm Booking Screen')

        Step5 As TestStep:
            Description: ="Verify after 5 seconds the Feedback Modal is displayed"
            Screen: =Confirm Booking Screen
            Value: |-
                =Assert(First(colConfirmBooking_Feedback).ShouldPromptFeedback = true, "Expected: true, Actual: " & First(colConfirmBooking_Feedback).ShouldPromptFeedback)

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =Confirm Booking Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

    "'ef02bc48-3275-4642-be51-4f13b2cef63c' As TestCase":
        Description: ="Go to My Bookings page, select the Previous filter, create a personal booking, pass it to the Confirm Booking page, verify the filter is now set to Upcoming and the My Bookings page opens to Upcoming"
        DisplayName: |-
            ="Case: Update the My Bookings Filter Selection to Upcoming"

        Step8 As TestStep:
            Description: ="Navigate to the My Bookings Screen"
            Value: =Navigate('My Bookings Screen')

        Step9 As TestStep:
            Description: ="Select the Previous Filter"
            Value: =Select(btnAccessibilityFilter_Previous)

        Step11 As TestStep:
            Description: ="Verify the state of the My Bookings filter is set to PREVIOUS"
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " &Text(gblMyBookingsFilter = "PREVIOUS"))

        Step1 As TestStep:
            Description: ="Set testing user's reservations to zero to prevent issues"
            Value: |-
                =Patch(Users, LookUp(Users, user_email = Lower(gblAppUserDetails.mail)), { reservations_made_count: 0 });

        Step2 As TestStep:
            Description: ="Create a personal reservation to test"
            Value: |-
                =ClearCollect(colConfirmBooking_Result, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 20, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }) );

        Step3 As TestStep:
            Description: ="Navigate to the Confirm Booking Screen"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('Confirm Booking Screen')

        Step4 As TestStep:
            Description: ="Verify redirection to Confirm Booking Screen"
            Value: =Assert(App.ActiveScreen = 'Confirm Booking Screen')

        Step10 As TestStep:
            Description: ="Verify the state of the My Bookings filter is now UPCOMING"
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " &Text(gblMyBookingsFilter = "UPCOMING"))

        Step5 As TestStep:
            Description: ="Select the My Bookings button"
            Value: =Select(btnMyBookingsCBS)

        Step6 As TestStep:
            Description: ="Verify redirection to My Bookings"
            Screen: =My Bookings Screen
            Value: =Assert(App.ActiveScreen = 'My Bookings Screen')

        Step12 As TestStep:
            Description: ="Verify the state of the My Bookings filter is still UPCOMING"
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " &Text(gblMyBookingsFilter = "UPCOMING"))

        Step7 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =Confirm Booking Screen
            Value: =RemoveIf(Reservations, ID = First(colConfirmBooking_Result).ID)

