"'b88d1b98-7ada-4edf-8161-43132158ae44' As TestSuite":
    Description: =""
    DisplayName: |-
        ="Suite: My Bookings Screen"

    "'34482c01-e956-477b-97b6-abe94dc111ec' As TestCase":
        Description: ="Verify default bookings filter options"
        DisplayName: |-
            ="Case: My Bookings Filter Default Options"

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Value: =Navigate('My Bookings Screen')

        Step2 As TestStep:
            Description: ="Verify the app's default filter is selected"
            Screen: =My Bookings Screen
            Value: |-
                =Assert((gblMyBookingsFilter in ["PREVIOUS", "UPCOMING", "CANCELLED"]), "Expected: true, Actual: " & (gblMyBookingsFilter in ["PREVIOUS", "UPCOMING", "CANCELLED"]))

    "'bcb95415-5b9e-4eb9-ae7e-d5f24bd379ce' As TestCase":
        Description: ="Verify the global filter store when the previous filter option is selected"
        DisplayName: |-
            ="Case: My Bookings Previous Filter"

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Previous Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step2 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " & (gblMyBookingsFilter = "PREVIOUS"))

    "'0b59da76-2e48-441f-8ca6-f27642eb9d2f' As TestCase":
        Description: ="Verify the global filter store when the upcoming filter option is selected"
        DisplayName: |-
            ="Case: My Bookings Upcoming Filter"

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step2 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step3 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

    "'38ebde53-81d4-4773-8299-188751cf46e2' As TestCase":
        Description: ="Verify the global filter store when the cancelled filter option is selected"
        DisplayName: |-
            ="Case: My Bookings Cancelled Filter"

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step2 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step3 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

    "'6c6d9e5b-d2f2-4662-bb67-a52a41485329' As TestCase":
        Description: ="Create previous reservation within the 30 day boundary, select the previous filter,  and verify it is displayed"
        DisplayName: |-
            ="Case: [Previous Filter] Past 30 Days of Bookings Displayed"

        Step4 As TestStep:
            Description: ="Create a personal previous reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -25, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step2 As TestStep:
            Description: ="Select the Previous Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step3 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " & (gblMyBookingsFilter = "PREVIOUS"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the past 30 days"
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'db967366-6654-4f33-85c2-096faf5a404b' As TestCase":
        Description: ="Create a reservation for today, select the previous filter,  and verify it is not displayed"
        DisplayName: |-
            ="Case: [Previous Filter] Today Booking"

        Step1 As TestStep:
            Description: ="Create a personal previous reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Previous Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " & (gblMyBookingsFilter = "PREVIOUS"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the past 30 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'59015e54-219b-4239-b0b9-f59bf71e3718' As TestCase":
        Description: ="Create a reservation for the future, select the previous filter,  and verify it is not displayed"
        DisplayName: |-
            ="Case: [Previous Filter] Future Booking"

        Step1 As TestStep:
            Description: ="Create a personal previous reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 4, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Previous Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " & (gblMyBookingsFilter = "PREVIOUS"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the past 30 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'35e01171-3174-4efa-9f36-35bf21ba872c' As TestCase":
        Description: ="Create previous reservation beyond 30 day boundary, select the previous filter, and verify it is not displayed"
        DisplayName: |-
            ="Case: [Previous Filter] Beyond 30 Days in Past Booking"

        Step1 As TestStep:
            Description: ="Create a personal previous reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -32, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Previous Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " & (gblMyBookingsFilter = "PREVIOUS"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the past 30 days"
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'dcc0fc6a-f381-4722-949c-096fb11ffd65' As TestCase":
        Description: ="Create a cancelled reservation in the past, select the cancelled filter, and verify it is displayed"
        DisplayName: |-
            ="Case: [Cancelled Filter] Past Booking"

        Step1 As TestStep:
            Description: ="Create a personal previous reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -1, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the last 30 days to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date > DateAdd(Today(), 7, Days) && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'d645c8e1-268e-4750-87c0-e3e6fcab1e63' As TestCase":
        Description: ="Create a cancelled reservation in the future, select the cancelled filter, and verify it is displayed"
        DisplayName: |-
            ="Case: [Cancelled Filter] Future Cancelled Booking"

        Step1 As TestStep:
            Description: ="Create a personal past reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 4, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the last 30 days to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date > DateAdd(Today(), 7, Days) && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'39f3e458-cfa9-420d-8af0-ece69afb7d01' As TestCase":
        Description: ="Create a cancelled reservation for today, select the cancelled filter, and verify it is displayed"
        DisplayName: |-
            ="Case: [Cancelled Filter] Today Booking"

        Step1 As TestStep:
            Description: ="Create a personal past reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the last 30 days to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date > DateAdd(Today(), 7, Days) && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'aa79c942-6762-453d-bd0e-e2ed7b2199ed' As TestCase":
        Description: ="Create a reservation in the past, select the upcoming filter, and verify it is not displayed"
        DisplayName: |-
            ="Case: [Upcoming Filter] Past Booking"

        Step1 As TestStep:
            Description: ="Create a personal past reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -10, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from today to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date < Today() && start_date > DateAdd(Today(), 7, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date <= Today() && start_date > DateAdd(Today(), 7, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'c663aa47-e720-4ee4-8b5d-925e8b2006c2' As TestCase":
        Description: ="Create reservations, select the upcoming filter, verify the ordering of the reservations is ascending"
        DisplayName: |-
            ="Case: [Upcoming Filter] Bookings Ordered by Most Recent to Furthest Out"

        Step6 As TestStep:
            Description: ="Create bookings to test sorting on"
            Value: |-
                =ClearCollect(colTestBookings, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }), Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 4, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }), Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 6, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

        Step5 As TestStep:
            Description: ="Verify the sorting for past booking Earliest to Latest"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(Concat(galMyBookingResults.AllItems, Text(start_date), ", ") = Concat(SortByColumns(galMyBookingResults.AllItems, "start_date", Ascending), Text(start_date), ", "), "Expected: true, Actual: false")

        Step1 As TestStep:
            Description: ="Delete the test bookings"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID in colTestBookings.ID)

    "'68f60a57-27bc-45f4-b21a-8cde5d299f52' As TestCase":
        Description: ="Create a reservation in the future beyond the 7 day boundary, select the upcoming filter, and verify it is not displayed"
        DisplayName: |-
            ="Case: [Upcoming Filter] Beyond 7 Days in the Future Booking"

        Step1 As TestStep:
            Description: ="Create a personal past reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 15, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from today to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date < Today() && start_date > DateAdd(Today(), 7, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date <= Today() && start_date > DateAdd(Today(), 7, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'dbcf8d9b-ab88-4f9f-aa18-bdf75083602c' As TestCase":
        Description: ="Create reservations, select the previous filter, verify the ordering of the reservations is descending"
        DisplayName: |-
            ="Case: [Previous Filter] Bookings Ordered by Most Recent to Oldest"

        Step6 As TestStep:
            Description: ="Create bookings to test sorting on"
            Value: |-
                =ClearCollect(colTestBookings, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -25, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }), Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -15, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }), Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -5, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step2 As TestStep:
            Description: ="Select the Previous Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step3 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "PREVIOUS", "Expected: true, Actual: " & (gblMyBookingsFilter = "PREVIOUS"))

        Step4 As TestStep:
            Description: ="Verify the sorting for past booking (Most recent to oldest)"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(Concat(galMyBookingResults.AllItems, Text(start_date), ", ") = Concat(SortByColumns(galMyBookingResults.AllItems, "start_date", Descending), Text(start_date), ", "), "Expected: true, Actual: false")

        Step5 As TestStep:
            Description: ="Delete the test bookings"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID in colTestBookings.ID)

    "'b132225e-d08f-489a-898e-fa5998f5f106' As TestCase":
        Description: ="Create reservations, select the cancelled filter, verify the ordering of the reservations is descending"
        DisplayName: |-
            ="Case: [Cancelled Filter] Bookings Ordered by Most Recent to Oldest"

        Step6 As TestStep:
            Description: ="Create bookings to test sorting on"
            Screen: =Test Screen-NotVisible
            Value: |-
                =ClearCollect(colTestBookings, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 1, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }), Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 4, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }), Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 6, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step1 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step2 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step3 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

        Step4 As TestStep:
            Description: ="Verify the sorting for cancelled bookings from Earliest to Latest"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(Concat(galMyBookingResults.AllItems, Text(start_date), ", ") = Concat(SortByColumns(galMyBookingResults.AllItems, "start_date", Descending), Text(start_date), ", "), "Expected: true, Actual: false")

        Step5 As TestStep:
            Description: ="Delete the test bookings"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID in colTestBookings.ID)

    "'9e7497ac-48e8-441d-8a64-19c56a7cbd4d' As TestCase":
        Description: ="Save the reservations, clear them, select the upcoming filter, verify the no bookings modal is displayed alongside the book a seat button"
        DisplayName: |-
            ="Case: No Bookings Found"

        Step6 As TestStep:
            Description: ="Save local reservations for upcoming"
            Value: =ClearCollect(colTestBookings, Filter(colMyBookings_Results, start_date >= Today()))

        Step4 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step1 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step2 As TestStep:
            Description: ="Clear local reservations for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(colMyBookings_Results, start_date >= Today())

        Step3 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

        Step7 As TestStep:
            Description: ="Verify No Bookings Found text"
            Value: |-
                =Assert(lblNoBookingsMBS.Text = LookUp(colTranslationTable, key = "mybookings.nobookings" && language.Value = gblAppUserLang, text), "Expected: " & LookUp(colTranslationTable, key = "mybookings.nobookings" && language.Value = gblAppUserLang, text) & ", Actual: " & lblNoBookingsMBS.Text)

        Step9 As TestStep:
            Description: ="Verify No Bookings Found is displayed"
            Value: |-
                =Assert(lblNoBookingsMBS.Visible = true, "Expected: true" & ",Actual: " & lblNoBookingsMBS.Visible)

        Step8 As TestStep:
            Description: ="Verify the Book a Seat button is displayed"
            Value: |-
                =Assert(btnBackToSearchMBS.Visible = true, "Expected: true, Actual: " & btnBackToSearchMBS.Visible)

        Step5 As TestStep:
            Description: ="Add back in the local reservations for upcoming"
            Value: =Collect(colMyBookings_Results, colTestBookings)

    "'040a89df-304e-4659-a0e2-c03f4d545ac4' As TestCase":
        Description: ="Save the reservations, clear them, select the upcoming filter, verify the no bookings modal is displayed alongside the book a seat button, verify the book a seat button redirects to the search page"
        DisplayName: |-
            ="Case: No Bookings Found Link to Search for Seating"

        Step1 As TestStep:
            Description: ="Save local reservations for upcoming"
            Screen: =Test Screen-NotVisible
            Value: =ClearCollect(colTestBookings, Filter(colMyBookings_Results, start_date >= Today()))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Clear local reservations for upcoming"
            Screen: =Test Screen-NotVisible
            Value: =RemoveIf(colMyBookings_Results, start_date >= Today())

        Step4 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step5 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

        Step7 As TestStep:
            Description: ="Verify the Book a Seat button is displayed"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(btnBackToSearchMBS.Visible = true, "Expected: true, Actual: " & btnBackToSearchMBS.Visible)

        Step8 As TestStep:
            Description: ="Select the Book a Seat button"
            Value: =Select(btnBackToSearchMBS)

        Step9 As TestStep:
            Description: ="Verify the Search Seating page is visible"
            Value: =Assert(App.ActiveScreen = 'Search Screen')

        Step6 As TestStep:
            Description: ="Add back in the local reservations for upcoming"
            Screen: =My Bookings Screen
            Value: =Collect(colMyBookings_Results, colTestBookings)

    "'a350e6b2-ccba-486c-87c6-0618b1877918' As TestCase":
        Description: ="Create a reservation, choose the upcoming filter, select the first reservation in the gallery, verify redirection to the booking details page"
        DisplayName: |-
            ="Case: View Details of a Booking"

        Step2 As TestStep:
            Description: ="Add a reservation for upcoming"
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step3 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step4 As TestStep:
            Description: ="Select the Upcoming Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step5 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "UPCOMING", "Expected: true, Actual: " & (gblMyBookingsFilter = "UPCOMING"))

        Step6 As TestStep:
            Description: ="Select the first reservation in the gallery"
            Screen: =My Bookings Screen
            Value: =Select(galMyBookingResults, 1, crdAccessibilityBookingMBS)

        Step7 As TestStep:
            Description: ="Verify the Booking Details page is visible"
            Screen: =Search Screen
            Value: =Assert(App.ActiveScreen = 'Booking Details Screen')

        Step1 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =Booking Details Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'2acc2456-726b-4213-9efe-2386a6ae51a3' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking associations are displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Booking Associations Verification] Verify Booking Associations displayed on card"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(TestAccount.Mail), proxy_user_email: Lower(gblAppUserDetails.mail), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step5 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step6 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step4 As TestStep:
            Description: ="Verify the booking associations test is not blank for our outbound booking"
            Value: |-
                =Assert(!IsBlank(First(galMyBookingResults.AllItems).lblBookingAssociationsMBS.Text), "Expected: true, Actual: " & !IsBlank(First(galMyBookingResults.AllItems).lblBookingAssociationsMBS.Text))

        Step3 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =Booking Details Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'c41cc51c-3bc8-4b4d-b85d-e869aa0d86e5' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking status are displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Booking Status Verification] Verify Booking Status displayed on Upcoming cards"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the booking status is the same as our new booking"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(Trim(First(galMyBookingResults.AllItems).lblBookingStatusMBS.Text) = LookUp(colTranslationTable, key = "mybookings.card.status.booked" && language.Value = gblAppUserLang, text), "Expected: " & LookUp(colTranslationTable, key = "mybookings.card.status.booked" && language.Value = gblAppUserLang, text) & ", Actual: " & Trim(First(galMyBookingResults.AllItems).lblBookingStatusMBS.Text))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'08906faa-a8ef-44bc-acc0-9d74341c2c26' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's seat name are displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Seat Name Verification] Verify Seat Name is displayed on card"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the seat is the same as our new booking's seat"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(!IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en)), First(galMyBookingResults.AllItems).lblSeatNameMBS.Text)), "Expected: true, Actual: " & !IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en)), First(galMyBookingResults.AllItems).lblSeatNameMBS.Text)))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'838be7ca-db52-419f-883e-734ed3786bea' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's seating type are displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Seating Type Verification] Verify Seating Type is displayed on card"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the seating type is the same as our new booking's seating type"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(!IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, LookUp(SeatingTypes, ID = seating_type_id.Id, Switch(gblAppUserLang, "fr", seating_type_name_fr, seating_type_name_en))), First(galMyBookingResults.AllItems).lblSeatNameMBS.Text)), "Expected: true, Actual: " & !IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, LookUp(SeatingTypes, ID = seating_type_id.Id, Switch(gblAppUserLang, "fr", seating_type_name_fr, seating_type_name_en))), First(galMyBookingResults.AllItems).lblSeatNameMBS.Text)))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'4fa695ae-ad31-43b2-927b-753c5061160f' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's seat's workstation specifics are displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Workstation Specifics Verification] Verify Seating Type is displayed on card (1)"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the seating type is the same as our new booking's seating type"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(First(galMyBookingResults.AllItems).lblWorkstationSpecificsMBS.Text = Concat(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, workstation_specifics) As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, workstation_specifics)).Value <> tag.Value, ", ")), "Expected: true, Actual: " & Text(First(galMyBookingResults.AllItems).lblWorkstationSpecificsMBS.Text = Concat(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, workstation_specifics) As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, workstation_specifics)).Value <> tag.Value, ", "))))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'6c10da25-0618-4492-9a3d-bc012bdbd045' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's floor is displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Floor Verification] Verify Floor is displayed on card"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the floor is the same as our new booking's floor"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(!IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, LookUp(Neighbourhoods, ID = neighbourhood_id.Id, LookUp(Floors, ID = floor_id.Id, Switch(gblAppUserLang, "fr", floor_name_fr, floor_name_en)))), First(galMyBookingResults.AllItems).lblBuildingDetailsMBS.Text)), "Expected: true, Actual: " & !IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, LookUp(Neighbourhoods, ID = neighbourhood_id.Id, LookUp(Floors, ID = floor_id.Id, Switch(gblAppUserLang, "fr", floor_name_fr, floor_name_en)))), First(galMyBookingResults.AllItems).lblBuildingDetailsMBS.Text)))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'951f15ac-6871-43ed-853a-3c5e8265d17f' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's building is displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Building Verification] Verify Building is displayed on card"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the building is the same as our new booking's building"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(!IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, LookUp(Buildings, ID = building_id.Id, Switch(gblAppUserLang, "fr", building_name_fr, building_name_en))), First(galMyBookingResults.AllItems).lblBuildingDetailsMBS.Text)), "Expected: true, Actual: " & !IsBlank(Find(LookUp(Desks, ID = TestMyBookingsReso.desk_id.Id, LookUp(Buildings, ID = building_id.Id, Switch(gblAppUserLang, "fr", building_name_fr, building_name_en))), First(galMyBookingResults.AllItems).lblBuildingDetailsMBS.Text)))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'4c1186ba-e118-48d3-b68d-bd2235073902' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's date is displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Date Verification] Verify Booking Date is displayed on card"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the booking date is the same as our new booking's date"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(!IsBlank(Find(Lower(Switch(gblAppUserLang, "fr", Text(TestMyBookingsReso.start_date, "[$-en-US]dddd d, mmmm, yyyy", "fr-FR"), Text(TestMyBookingsReso.start_date, "[$-en-US]dddd, mmmm d, yyyy", "en-CA"))), Lower(First(galMyBookingResults.AllItems).lblDateMBS.Text))), "Expected: true, Actual: " & !IsBlank(Find(Lower(Switch(gblAppUserLang, "fr", Text(TestMyBookingsReso.start_date, "[$-en-US]dddd d, mmmm, yyyy", "fr-FR"), Text(TestMyBookingsReso.start_date, "[$-en-US]dddd, mmmm d, yyyy", "en-CA"))), Lower(First(galMyBookingResults.AllItems).lblDateMBS.Text))))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'10d525f3-a8c2-47b9-b1a4-d4f94d54904a' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Upcoming, verify the booking's timeslot is displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Timeslot Verification] Verify Booking Timeslot is displayed on card (1)"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: Today(), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the upcoming filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Upcoming)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the booking timeslot is the same as our new booking's timeslot"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(!IsBlank(Find(Lower(LookUp(Timeslots, ID = TestMyBookingsReso.timeslot_id.Id, Switch(gblAppUserLang, "fr", time_range_fr, time_range_en))), Lower(First(galMyBookingResults.AllItems).lblTimeRangeMBS.Text))), "Expected: true, Actual: " & !IsBlank(Find(Lower(LookUp(Timeslots, ID = TestMyBookingsReso.timeslot_id.Id, Switch(gblAppUserLang, "fr", time_range_fr, time_range_en))), Lower(First(galMyBookingResults.AllItems).lblTimeRangeMBS.Text))))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'3c337911-7749-4d75-a68e-bc1df989014c' As TestCase":
        Description: ="Create a cancelled reservation beyond 30 days in the past, select the cancelled filter, and verify it is displayed"
        DisplayName: |-
            ="Case: [Cancelled Filter] Beyond 30 Days in Past Booking"

        Step1 As TestStep:
            Description: ="Create a personal reservation beyond 30 days in past to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), -32, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the last 30 days to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date > DateAdd(Today(), 7, Days) && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'0de04e34-a26e-4214-a3ad-a974e772df0a' As TestCase":
        Description: ="Create a cancelled reservation beyond 7 days in the future, select the cancelled filter, and verify it is displayed"
        DisplayName: |-
            ="Case: [Cancelled Filter] Beyond 7 Days in Future Booking"

        Step1 As TestStep:
            Description: ="Create a personal previous reservation to test"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: "", start_date: DateAdd(Today(), 9, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Cancelled Filter button"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Verify the chosen filter updates the global store of the filter"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(gblMyBookingsFilter = "CANCELLED", "Expected: true, Actual: " & (gblMyBookingsFilter = "CANCELLED"))

        Step5 As TestStep:
            Description: ="Verify the displayed results are from the last 30 days to the next 7 days"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(IsEmpty(Filter(galMyBookingResults.AllItems, start_date > DateAdd(Today(), 7, Days) && start_date < DateAdd(Today(), -30, Days))), "Expected: true, Actual: " & IsEmpty(Filter(galMyBookingResults.AllItems, start_date >= Today() && start_date < DateAdd(Today(), -30, Days))))

        Step6 As TestStep:
            Description: ="Delete the personal test reservation"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'82c671c8-3410-46fa-a04f-2b7eebf7395b' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Previous, verify the booking status is not displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Booking Status Verification] Verify Booking Status displayed on Previous cards"

        Step1 As TestStep:
            Description: ="Add a reservation for previous"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: DateAdd(Today(), -5, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the previous filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Previous)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the booking status text is not visible"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(First(galMyBookingResults.AllItems).lblBookingStatusMBS.Text = "", "Expected: , Actual: " & Trim(First(galMyBookingResults.AllItems).lblBookingStatusMBS.Text))

        Step6 As TestStep:
            Description: ="Remove the reservation for previous"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'54f6340f-f8e2-4879-9643-412c2914c98c' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Cancelled, verify the booking status is not displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Booking Status Verification] Verify Booking Status displayed on Upcoming cards (1) (1)"

        Step1 As TestStep:
            Description: ="Add a cancelled reservation"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: DateAdd(Today(), -30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the cancelled filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify the booking status text is not visible"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(First(galMyBookingResults.AllItems).lblBookingStatusMBS.Text = "", "Expected: , Actual: " & Trim(First(galMyBookingResults.AllItems).lblBookingStatusMBS.Text))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

    "'fcf1b930-b204-48bf-9e1c-ae6c8a892378' As TestCase":
        Description: ="Create a reservation, go to My Bookings screen, select Cancelled, verify the booking status are displayed, remove the reservation"
        DisplayName: |-
            ="Case: [Cancelled Filter] Verify Cards are not clickable"

        Step1 As TestStep:
            Description: ="Add a reservation for upcoming"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "CANCELLED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: First(Desks).ID, Value: First(Desks).ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: DateAdd(Today(), -30, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: LookUp(colTimeslots, time_range_en = "ALL DAY").ID, Value: LookUp(colTimeslots, time_range_en = "ALL DAY").ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to the My Bookings page"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the cancelled filter to view the booking we made"
            Screen: =My Bookings Screen
            Value: =Select(btnAccessibilityFilter_Cancelled)

        Step4 As TestStep:
            Description: ="Clear all the local bookings except for the booking we made"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Select the first booking in the gallery"
            Screen: =My Bookings Screen
            Value: =Select(galMyBookingResults, 1, crdAccessibilityBookingMBS)

        Step7 As TestStep:
            Description: ="Verify selecting the first booking did not redirect to the Booking Details screen"
            Value: |-
                =Assert(App.ActiveScreen <> 'Booking Details Screen', "Expected: true, Actual: " & Text(App.ActiveScreen <> 'Booking Details Screen'))

        Step8 As TestStep:
            Description: ="Verify the active screen is still the My Bookings page"
            Value: |-
                =Assert(App.ActiveScreen = 'My Bookings Screen', "Expected: true, Actual: " & Text(App.ActiveScreen = 'My Bookings Screen'))

        Step6 As TestStep:
            Description: ="Remove the reservation for upcoming"
            Screen: =My Bookings Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

