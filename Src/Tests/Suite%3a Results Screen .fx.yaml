"'70067b62-7bf2-4f4f-8cc2-5b7ff349c027' As TestSuite":
    Description: =""
    DisplayName: |-
        ="Suite: Results Screen "

    "'9065e498-2c1a-4454-8883-6d08a767fc2c' As TestCase":
        Description: ="Search for seats and verify the selected building is carried over to the results screen"
        DisplayName: |-
            ="Case: [Building Verification] Building carried across to the Results Screen"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Confirm Booking Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Save Selected Building"
            Screen: =Search Screen
            Value: =Set(TestSelectedBuilding, drpBuilding.Selected)

        Step5 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step9 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step10 As TestStep:
            Description: ="Save Reservation Date & Timeslot ID"
            Screen: =Search Screen
            Value: =Set(TestSelectedDate, DatePicker.SelectedDate); Set(TestSelectedTimeslot, drpTimeRange.Selected.ID)

        Step11 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step12 As TestStep:
            Description: ="Verify result desks are only from the building chosen on the search page"
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, building_id.Id <> TestSelectedBuilding.ID)), "Expected: true, Actual: " & IsEmpty(Filter(galSearchResults.AllItems, building_id.Id <> TestSelectedBuilding.ID)))

    "'3fc1bde2-663c-46f0-9b81-7e29c154555f' As TestCase":
        Description: ="Search for seats and verify the selected date is carried over to the results screen"
        DisplayName: |-
            ="Case: [Date Verification] Date carried across to the Results Screen"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Splash Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step8 As TestStep:
            Description: ="Save Selected Date"
            Screen: =Search Screen
            Value: =Set(TestSelectedDate, DatePicker.SelectedDate)

        Step9 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step10 As TestStep:
            Description: ="Save Reservation Date & Timeslot ID"
            Screen: =Search Screen
            Value: =Set(TestSelectedDate, DatePicker.SelectedDate); Set(TestSelectedTimeslot, drpTimeRange.Selected.ID)

        Step11 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step12 As TestStep:
            Description: ="Verify result desk only have the date from the search page"
            Screen: =Results Screen
            Value: |-
                =Assert( (DateValue(lblDateRS.Text) = TestSelectedDate), "Expected: " & TestSelectedDate & " Actual: " & DateValue(lblDateRS.Text))

    "'12c60fc7-c5d8-499c-8418-d14045aaf423' As TestCase":
        Description: ="Search for seats and verify the selected time range is carried over to the results screen"
        DisplayName: |-
            ="Case: [Time Range Verification] Time Range carried across to the Results Screen"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Splash Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step8 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step9 As TestStep:
            Description: ="Save Selected Time Range"
            Screen: =Search Screen
            Value: =Set(TestSelectedTimeRange, drpTimeRange.Selected)

        Step10 As TestStep:
            Description: ="Save Reservation Date & Timeslot ID"
            Screen: =Search Screen
            Value: =Set(TestSelectedDate, DatePicker.SelectedDate); Set(TestSelectedTimeslot, drpTimeRange.Selected.ID)

        Step11 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step12 As TestStep:
            Description: ="Verify result desk only have the time range from the search page"
            Screen: =Results Screen
            Value: |-
                =Assert(lblTimeRS.Text = TestSelectedTimeRange.Result, "Expected: " & TestSelectedTimeRange.Result & " Actual: " & lblTimeRS.Text)

    "'3124348e-e7d3-4985-9cc8-a1fcb67d5ca3' As TestCase":
        Description: ="Search for seats and verify the selected filter is applied to the results"
        DisplayName: |-
            ="Case: Filter By Quiet Seating Arrangements"

        Step5 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step3 As TestStep:
            Description: ="Save all Quiet Arrangement results"
            Value: =Set(TestSearchResults, Filter(galSearchResults.AllItems, seating_arrangement_id.Id = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet").ID))

        Step2 As TestStep:
            Description: ="Select the Quiet Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step1 As TestStep:
            Description: ="Verify the filter state table is updated"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step4 As TestStep:
            Description: ="Verify only desks with Quiet Seating Arrangements are displayed"
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))), "Expected: true" & " Actual: " & IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))))

        Step6 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'e55a5f7e-c9a8-455b-975b-d332fd7737f7' As TestCase":
        Description: ="Search for seats and verify the selected filter is applied to the results"
        DisplayName: |-
            ="Case: Filter By Mixed Seating Arrangements"

        Step4 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step5 As TestStep:
            Description: ="Save all Mixed Arrangement results"
            Value: =Set(TestSearchResults, Filter(galSearchResults.AllItems, seating_arrangement_id.Id = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed").ID))

        Step2 As TestStep:
            Description: ="Select the Mixed Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnAccessibilityFilter_Transitional)

        Step1 As TestStep:
            Description: ="Verify the filter state table is updated"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step3 As TestStep:
            Description: ="Verify only desks with Mixed Seating Arrangements are displayed"
            Screen: =Results Screen
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))), "Expected: true" & " Actual: " & IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))))

        Step6 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'b1bac1ff-9fca-4aa6-a830-36243ab6387a' As TestCase":
        Description: ="Search for seats and verify the selected filter is applied to the results"
        DisplayName: |-
            ="Case: Filter By Collabortaive Seating Arrangements"

        Step5 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step3 As TestStep:
            Description: ="Save all Collaborative Arrangement results"
            Screen: =Results Screen
            Value: =Set(TestSearchResults, Filter(galSearchResults.AllItems, seating_arrangement_id.Id = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative").ID))

        Step2 As TestStep:
            Description: ="Select the Collaborative Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnAccessibilityFilter_Interactive)

        Step1 As TestStep:
            Description: ="Verify the filter state table is updated"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step4 As TestStep:
            Description: ="Verify only desks with Collaborative Seating Arrangements are displayed"
            Screen: =Results Screen
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))), "Expected: true" & " Actual: " & IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))))

        Step6 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'632fb5cc-4250-40ca-b64f-baa6681beb69' As TestCase":
        Description: ="Search for seats and verify the selected filter is applied to the results"
        DisplayName: |-
            ="Case: Filter By Select All Seating Arrangements"

        Step1 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step3 As TestStep:
            Description: ="Save all gallery results"
            Screen: =Results Screen
            Value: =Set(TestSearchResults, Filter(galSearchResults.AllItems, seating_arrangement_id.Id in SeatingArrangements.ID))

        Step2 As TestStep:
            Description: ="Select the Select All Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnFilterSelectAllAccessibility)

        Step4 As TestStep:
            Description: ="Verify desks of any Seating Arrangements are displayed"
            Screen: =Results Screen
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))), "Expected: true" & " Actual: " & IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))))

        Step5 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'47f2709b-f6c1-42f5-9ff6-6c4f5e83c164' As TestCase":
        Description: ="Search for seats and verify the filter has no options selected and all results of all seating arrangements are displayed"
        DisplayName: |-
            ="Case: Filter Seating Arrangements - Default Behaviour "

        Step2 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step4 As TestStep:
            Description: ="Verify Quiet filter is deselected"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step3 As TestStep:
            Description: ="Verify Mixed filter is deselected"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step1 As TestStep:
            Description: ="Verify Collaborative filter is deselected"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step7 As TestStep:
            Description: ="Save all gallery results (all seating arrangments deselected = all results)"
            Screen: =Results Screen
            Value: =Set(TestSearchResults, galSearchResults.AllItems)

        Step6 As TestStep:
            Description: ="Select the Select All Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnFilterSelectAllAccessibility)

        Step5 As TestStep:
            Description: ="Verify when all seating arrangements are selected that has the same result set as none selected"
            Screen: =Results Screen
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))), "Expected: true" & " Actual: " & IsEmpty(Filter(galSearchResults.AllItems, Not(ID in TestSearchResults.ID))))

        Step8 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'8a392d61-8172-4c7e-9810-58ae350e8fb8' As TestCase":
        Description: ="Search for seats and verify the selected filter is applied to the results"
        DisplayName: |-
            ="Case: Filter By Select All Seating Arrangements Enables All Filter Options"

        Step1 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step3 As TestStep:
            Description: ="Verify Quiet filter is disabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step2 As TestStep:
            Description: ="Verify Mixed filter is disabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step8 As TestStep:
            Description: ="Verify Collaborative filter is disabled"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step6 As TestStep:
            Description: ="Select the Select All Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnFilterSelectAllAccessibility)

        Step5 As TestStep:
            Description: ="Verify Quiet filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled) = true, "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step7 As TestStep:
            Description: ="Verify Mixed filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled) = true, "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step4 As TestStep:
            Description: ="Verify Collaborative filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled) = true, "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step9 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'42212836-40ba-4e9e-b981-b815c15a4263' As TestCase":
        Description: ="Search for seats and on the results page select the floorplan for the first seat"
        DisplayName: |-
            ="Case:  [NOT WORKING] Card Links to Floorplan Page"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Splash Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step8 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step9 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step12 As TestStep:
            Description: ="Populate the results gallery (since there may be no results)"
            Value: =ClearCollect(colMyResults_Results, LookUp(Desks, status.Value = "ACTIVE"))

        Step10 As TestStep:
            Description: ="Select a Seat's floorplan"
            Screen: =Results Screen
            Value: =Select(galSearchResults, 1, btnAccessibilityFloorPlanRS)

        Step11 As TestStep:
            Description: ="Verify redirection to the Floorplan Screen"
            Screen: =Results Screen
            Value: =Assert(App.ActiveScreen = 'Floorplan Screen')

    "'46301ea1-f5b5-4f78-81c4-9cbc29106209' As TestCase":
        Description: ="On Search Redirect to Results Screen"
        DisplayName: |-
            ="Case: On Search Redirect to Results Screen"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Confirm Booking Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step8 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step9 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step10 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step4 As TestStep:
            Description: ="Verify result desks are only from the building chosen on the search page"
            Value: =Assert(App.ActiveScreen = 'Results Screen')

    "'35e04b82-28dd-44f7-a070-0847cbe9f4b6' As TestCase":
        Description: ="Search for seats and select the first seat and get redirected to Review Your Booking page"
        DisplayName: |-
            ="Case: [NOT WORKING] Select Desk Redirect to Review Your Booking Page"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Splash Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step8 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step9 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step12 As TestStep:
            Description: ="Populate the results gallery (since there may be no results)"
            Value: =ClearCollect(colMyResults_Results, LookUp(Desks, status.Value = "ACTIVE"))

        Step10 As TestStep:
            Description: ="Select a Seat's card"
            Screen: =Results Screen
            Value: =Select(galSearchResults, 1, crdSeatingAccessibilityRS)

        Step11 As TestStep:
            Description: ="Verify redirection to the Review Your Booking Screen"
            Screen: =Review Booking Screen
            Value: =Assert(App.ActiveScreen = 'Review Booking Screen')

    "'5206e765-3c26-4ed2-9835-eee30590e090' As TestCase":
        Description: ="Search for seats, select filters, select the first seat, get redirected to Review Your Booking page, go back to results screen, filter is saved"
        DisplayName: |-
            ="Case: Filter Selection Saves Between Results Screen and Review Your Booking Page"

        Step9 As TestStep:
            Description: ="Bypass Search Screen"
            Screen: =Search Screen
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step6 As TestStep:
            Description: ="Select the Quiet Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step5 As TestStep:
            Description: ="Verify Quiet filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step8 As TestStep:
            Description: ="Populate the results gallery (since there may be no results)"
            Screen: =Results Screen
            Value: =ClearCollect(colMyResults_Results, LookUp(Desks, status.Value = "ACTIVE", seating_arrangement_id.Id = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID)))

        Step4 As TestStep:
            Description: ="Select a Seat's card"
            Value: =Select(galSearchResults, 1, crdSeatingAccessibilityRS)

        Step7 As TestStep:
            Description: ="Verify redirection to the Review Your Booking Screen"
            Screen: =Review Booking Screen
            Value: =Assert(App.ActiveScreen = 'Review Booking Screen')

        Step3 As TestStep:
            Description: ="Navigate back to the results"
            Value: =Back()

        Step2 As TestStep:
            Description: ="Verify redirection to the Results Screen"
            Value: =Assert(App.ActiveScreen = 'Results Screen')

        Step1 As TestStep:
            Description: ="Verify Quiet filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step10 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'0956b4b1-de51-4058-b2e6-cb7b5603d50e' As TestCase":
        Description: ="Search for seats, sequentially select the filters, verify only once they are all enabled that see all is hidden"
        DisplayName: |-
            ="Case: Enabled Filters Until all Selected and See All is Hidden"

        Step1 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step3 As TestStep:
            Description: ="Select the Quiet Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step8 As TestStep:
            Description: ="Verify Quiet filter is enabled"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step2 As TestStep:
            Description: ="Select the Mixed Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Transitional)

        Step7 As TestStep:
            Description: ="Verify Mixed filter is enabled"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step4 As TestStep:
            Description: ="Select the Collaborative Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Interactive)

        Step6 As TestStep:
            Description: ="Verify Collaborative filter is enabled"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step5 As TestStep:
            Description: ="Verify the Select All button is hidden"
            Screen: =Results Screen
            Value: |-
                =Assert(lblFilterSelectAll.Visible = false, "Expected: false, Actual: " &lblFilterSelectAll.Visible)

        Step9 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'3e5b3b56-1f67-4afc-bc36-4a9140453027' As TestCase":
        Description: ="Search for seats, select see all, the see all should be hidden when all filters are enabled"
        DisplayName: |-
            ="Case: All Filters Selected See All is Hidden"

        Step1 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step6 As TestStep:
            Description: ="Select the Select All Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnFilterSelectAllAccessibility)

        Step3 As TestStep:
            Description: ="Verify Quiet filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step4 As TestStep:
            Description: ="Verify Mixed filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step5 As TestStep:
            Description: ="Verify Collaborative filter is enabled"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step2 As TestStep:
            Description: ="Verify the Select All button is hidden"
            Value: |-
                =Assert(lblFilterSelectAll.Visible = false, "Expected: false, Actual: " &lblFilterSelectAll.Visible)

        Step7 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'b17a7de7-1e5a-42bf-8809-c55bd6b85248' As TestCase":
        Description: ="Search for seats, select a filter, clear results to force no results modal"
        DisplayName: |-
            ="Case: No Results Modal"

        Step1 As TestStep:
            Description: ="Bypass Search Screen"
            Screen: =Splash Screen
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step4 As TestStep:
            Description: ="Select the Quiet Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step2 As TestStep:
            Description: ="Clear results so no results are found"
            Screen: =Results Screen
            Value: =Clear(colMyResults_Results)

        Step5 As TestStep:
            Description: ="Clear desks in current seating arrangement "
            Screen: =Results Screen
            Value: =Clear(colMyResults_DesksInCurrSeatingArrangement)

        Step6 As TestStep:
            Description: ="Verify No Results title is displayed"
            Screen: =Results Screen
            Value: |-
                =Assert(lblNoResOrSeatsTitleRS.Text = LookUp(Translations, key = "bookingresults.noresults.title" && language.Value = "en", text), "Expected: " & LookUp(Translations, key = "bookingresults.noresults.title" && language.Value = "en", text) & ", Actual: " & lblNoResOrSeatsTitleRS.Text)

        Step3 As TestStep:
            Description: ="Verify No Results subtitle is displayed"
            Value: |-
                =Assert(lblNoResOrSeatsSubtitleRS.Text = LookUp(Translations, key = "bookingresults.noresults.subtitle" && language.Value = gblAppUserLang, text), "Expected: " & LookUp(Translations, key = "bookingresults.noresults.subtitle" && language.Value = gblAppUserLang, text) & ", Actual: " & lblNoResOrSeatsSubtitleRS.Text)

        Step7 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'48afa187-21ec-401f-9e60-e359c2d85fbe' As TestCase":
        Description: ="Search for seats, select a filter, clear results to force no results modal"
        DisplayName: |-
            ="Case: All workspaces are booked Modal"

        Step6 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step5 As TestStep:
            Description: ="Select the Quiet Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step4 As TestStep:
            Description: ="Clear results so no results are found"
            Screen: =Results Screen
            Value: =Clear(colMyResults_Results)

        Step3 As TestStep:
            Description: ="Clear desks in current seating arrangement "
            Screen: =Results Screen
            Value: =ClearCollect(colMyResults_DesksInCurrSeatingArrangement, LookUp(Desks, status.Value = "ACTIVE", seating_arrangement_id.Id <> LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID)))

        Step2 As TestStep:
            Description: ="Verify all workspaces are booked title is displayed"
            Screen: =Results Screen
            Value: |-
                =Assert(lblNoResOrSeatsTitleRS.Text = LookUp(Translations, key = "bookingresults.noseats.title" && language.Value = "en", text), "Expected: " & LookUp(Translations, key = "bookingresults.noseats.title" && language.Value = "en", text) & ", Actual: " & lblNoResOrSeatsTitleRS.Text)

        Step1 As TestStep:
            Description: ="Verify all workspaces are booked subtitle is displayed"
            Value: |-
                =Assert(lblNoResOrSeatsSubtitleRS.Text = LookUp(Translations, key = "bookingresults.noseats.subtitle" && language.Value = gblAppUserLang, text), "Expected: " & LookUp(Translations, key = "bookingresults.noseats.subtitle" && language.Value = gblAppUserLang, text) & ", Actual: " & lblNoResOrSeatsSubtitleRS.Text)

        Step7 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'0abc25e4-bd38-4c42-a13e-13daa5cf0cac' As TestCase":
        Description: ="Search for seats, select see all, the see all button is hidden, when filters are deselected the see all is visible again"
        DisplayName: |-
            ="Case: Deselecting Filters When All Are Selected Shows the See All Button"

        Step12 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step10 As TestStep:
            Description: ="Select the Select All Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnFilterSelectAllAccessibility)

        Step11 As TestStep:
            Description: ="Verify the Select All button is hidden"
            Value: |-
                =Assert(lblFilterSelectAll.Visible = false, "Expected: false, Actual: " &lblFilterSelectAll.Visible)

        Step6 As TestStep:
            Description: ="Toggle off the Quiet Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step9 As TestStep:
            Description: ="Verify Quiet filter is deselected"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step5 As TestStep:
            Description: ="Verify the Select All button is visible"
            Value: |-
                =Assert(lblFilterSelectAll.Visible = true, "Expected: true, Actual: " &lblFilterSelectAll.Visible)

        Step4 As TestStep:
            Description: ="Toggle off the Mixed Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Transitional)

        Step8 As TestStep:
            Description: ="Verify Mixed filter is deselected"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Mixed", ID), Enabled)))

        Step3 As TestStep:
            Description: ="Verify the Select All button is visible"
            Value: |-
                =Assert(lblFilterSelectAll.Visible = true, "Expected: true, Actual: " &lblFilterSelectAll.Visible)

        Step1 As TestStep:
            Description: ="Toggle off the Collaborative Seating Arrangement Filter"
            Value: =Select(btnAccessibilityFilter_Interactive)

        Step7 As TestStep:
            Description: ="Verify Collaborative filter is deselected"
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Collaborative", ID), Enabled)))

        Step2 As TestStep:
            Description: ="Verify the Select All button is visible"
            Value: |-
                =Assert(lblFilterSelectAll.Visible = true, "Expected: true, Actual: " &lblFilterSelectAll.Visible)

        Step13 As TestStep:
            Description: ="Clear the Seating Arrangement filter state"
            Value: |-
                =ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));

    "'104b17b1-d068-4df6-9900-a36957125ad9' As TestCase":
        Description: ="Search for seats, select filters, go back to search screen, search again, filters are reset"
        DisplayName: |-
            ="Case: Filter Selection Resets Between Results Screen and Search Screen"

        Step1 As TestStep:
            Description: ="Navigate to the Search for Seating Page"
            Screen: =Splash Screen
            Value: =Navigate('Search Screen')

        Step2 As TestStep:
            Description: ="Select a Region"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpRegion.Selected, {Value: First(Filter(colSearch_Regions, ID >= 1)).Result})

        Step3 As TestStep:
            Description: ="Select a Building"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpBuilding.Selected, {Value: First(Filter(colSearch_Buildings, ID >= 1)).Result})

        Step4 As TestStep:
            Description: ="Select a Floor"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpFloor.Selected, {Value: First(Filter(colSearch_Floors, ID >= 1)).Result})

        Step5 As TestStep:
            Description: ="Select a Neighbourhood"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpNeighbourhood.Selected, {Value: First(Filter(colSearch_Neighbourhoods, ID >= 1)).Result})

        Step6 As TestStep:
            Description: ="Select a Seating Type"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpSeatingType.Selected, {Value: First(Filter(colSearch_SeatingTypes, ID >= 1)).Result})

        Step7 As TestStep:
            Description: ="Select a Date"
            Screen: =Search Screen
            Value: =SetProperty(DatePicker.SelectedDate, Today())

        Step8 As TestStep:
            Description: ="Select a Time Range"
            Screen: =Search Screen
            Value: |-
                =SetProperty(drpTimeRange.Selected, {Value: First(Filter(colSearch_TimeRanges, ID >= 1)).Result})

        Step9 As TestStep:
            Description: ="Select Search Button"
            Screen: =Search Screen
            Value: =Select(btnSearch)

        Step10 As TestStep:
            Description: ="Select the Quiet Seating Arrangement Filter"
            Screen: =Results Screen
            Value: =Select(btnAccessibilityFilter_Quiet)

        Step11 As TestStep:
            Description: ="Verify Quiet filter is enabled"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled), "Expected: true, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

        Step14 As TestStep:
            Description: ="Navigate back to the search screen"
            Screen: =Results Screen
            Value: =Back()

        Step13 As TestStep:
            Description: ="Verify redirection to the Search Screen"
            Screen: =Results Screen
            Value: =Assert(App.ActiveScreen = 'Search Screen')

        Step15 As TestStep:
            Description: ="Select Search Button"
            Value: =Select(btnSearch)

        Step16 As TestStep:
            Description: ="Verify redirection to the Results Screen"
            Value: =Assert(App.ActiveScreen = 'Results Screen')

        Step12 As TestStep:
            Description: ="Verify Quiet filter is deselected"
            Screen: =Results Screen
            Value: |-
                =Assert(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled) = false, "Expected: false, Actual: " & Text(LookUp(colMyResultsFilter, ID = LookUp(SeatingArrangements, seating_arrangement_name_en = "Quiet", ID), Enabled)))

    "'eeca868d-68fe-4f26-8111-732573529289' As TestCase":
        Description: ="Search for seats, go through each result verifying the seat's workstation specifics (if any) are displayed in the card"
        DisplayName: |-
            ="Case: [Workstation Specifics Verification] Results workstation specifics reflect the seat's workstation specifics"

        Step1 As TestStep:
            Description: ="Bypass Search Screen"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: TestDate, locTimeRange: TestTimeRange })

        Step2 As TestStep:
            Description: ="Verify each result's workstation specifics are correctly parsed"
            Screen: =Results Screen
            Value: |-
                =Assert(Concat(galSearchResults.AllItems As galItems, Concat(galItems.workstation_specifics As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(galItems.workstation_specifics).Value <> tag.Value, ", "))) = Concat(ForAll(galSearchResults.AllItems As galItem, Concat(LookUp(Desks, ID = galItem.ID, workstation_specifics) As tag, If(!IsEmpty(tag), Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(galItem.workstation_specifics).Value <> tag.Value, ", ")))) As val, val.Value), "Expected: true, Actual: " & Text(Concat(galSearchResults.AllItems As galItems, Concat(galItems.workstation_specifics As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(galItems.workstation_specifics).Value <> tag.Value, ", "))) = Concat(ForAll(galSearchResults.AllItems As galItem, Concat(LookUp(Desks, ID = galItem.ID, workstation_specifics) As tag, If(!IsEmpty(tag), Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(galItem.workstation_specifics).Value <> tag.Value, ", ")))) As val, val.Value)))

    "'b35e17a4-96d6-4b06-9e3a-fe066881bb6e' As TestCase":
        Description: ="Make a upcoming reservation in status ""Booked"", open the reservation, cancel the booking, verify that the desk is not available on the day it is cancelled for, verify it is available  clean-up the reservation"
        DisplayName: |-
            ="Case: COVID Restriction - Release Seating Next Day for Same-Day Cancellation"

        Step1 As TestStep:
            Description: ="Add a reservation for the future"
            Screen: =Test Screen-NotVisible
            Value: |-
                =Set(TestMyBookingsReso, Patch(Reservations, Defaults(Reservations), { status: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Value: "BOOKED" }, desk_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: TestDesk.ID, Value: TestDesk.ID }, user_email: Lower(gblAppUserDetails.mail), proxy_user_email: Blank(), start_date: DateAdd(Today(), 3, Days), timeslot_id: { '@odata.type': "#Microsoft.Azure.Connectors.SharePoint.SPListExpandedReference", Id: TestTimeRange.ID, Value: TestTimeRange.ID  } }))

        Step2 As TestStep:
            Description: ="Navigate to My Bookings page to fetch new reservations"
            Screen: =Test Screen-NotVisible
            Value: =Navigate('My Bookings Screen')

        Step3 As TestStep:
            Description: ="Select the Upcoming filter"
            Screen: =My Bookings Screen
            Value: =Select(btnFilterBookings_Upcoming)

        Step4 As TestStep:
            Description: ="If there are any exisiting upcoming reservations remove them locally"
            Screen: =My Bookings Screen
            Value: =ClearCollect(colMyBookings_Results, Filter(colMyBookings_Results, ID = TestMyBookingsReso.ID))

        Step5 As TestStep:
            Description: ="Verify that the reservation exists locally"
            Screen: =My Bookings Screen
            Value: |-
                =Assert(TestMyBookingsReso.ID in colMyBookings_Results.ID, "Expected: true, Actual: " & Text(TestMyBookingsReso.ID in colMyBookings_Results.ID))

        Step6 As TestStep:
            Description: ="Select the booking we made from the gallery"
            Value: =Select(galMyBookingResults, 1, crdAccessibilityBookingMBS)

        Step7 As TestStep:
            Description: ="Verify the Booking Details page is visible"
            Screen: =Booking Details Screen
            Value: |-
                =Assert(App.ActiveScreen = 'Booking Details Screen', "Expected: true, Actual: " & Text(App.ActiveScreen = 'Booking Details Screen'))

        Step8 As TestStep:
            Description: ="Verify the status of the booking is Booked"
            Screen: =Booking Details Screen
            Value: |-
                =Assert(Lower(Trim(lblBookingStatusBDS.Text)) = Lower(Trim(LookUp(colTranslationTable, key = "mybookings.card.status.booked" && language.Value = gblAppUserLang, text))), "Expected: true, Actual: " & Text(Lower(Trim(lblBookingStatusBDS.Text)) = Lower(Trim(LookUp(colTranslationTable, key = "mybookings.card.status.booked" && language.Value = gblAppUserLang, text)))))

        Step9 As TestStep:
            Description: ="Select the Cancel button"
            Screen: =Booking Details Screen
            Value: =Select(btnCancelBookingBDS)

        Step10 As TestStep:
            Description: ="Select the button to confirm the cancellation of the booking"
            Value: =Select(btnCancelYesCYBS)

        Step11 As TestStep:
            Description: ="Verify the booking's status is updated in the DB"
            Value: |-
                =Assert(LookUp(Reservations, ID = TestMyBookingsReso.ID, status.Value) = "CANCELLED", "Expected: CANCELLED, Actual: " & Text(LookUp(Reservations, ID = TestMyBookingsReso.ID, status.Value)))

        Step15 As TestStep:
            Description: ="Verify the cancel your booking screen is displayed"
            Value: |-
                =Assert(App.ActiveScreen = 'Cancel Your Booking Screen', "Expected: true, Actual: " & Text(App.ActiveScreen = 'Cancel Your Booking Screen'))

        Step13 As TestStep:
            Description: ="Bypass the Search Screen and see available Desks for the same day"
            Value: |-
                =Navigate('Results Screen', ScreenTransition.Cover,
                { locRegion: TestRegion, locBuilding: TestBuilding, locFloor: TestFloor, locNeighbourhood: TestNeighbourhood, locSeatingType: TestSeatingType, locDate: DateAdd(Today(), 3, Days), locTimeRange: TestTimeRange })

        Step14 As TestStep:
            Description: ="Verify the desk we just cancelled is not is the list of desks availble to be booked"
            Value: |-
                =Assert(IsEmpty(Filter(galSearchResults.AllItems, ID = TestDesk.ID)), "Expected: true, Actual: " & IsEmpty(Filter(galSearchResults.AllItems, ID = TestMyBookingsReso.desk_id.Id)))

        Step12 As TestStep:
            Description: ="Remove the reservation for past"
            Screen: =Booking Details Screen
            Value: =RemoveIf(Reservations, ID = TestMyBookingsReso.ID)

