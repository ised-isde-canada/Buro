"'Results Screen' As screen.'phoneLayout_FluidGridWithHeaderPageLayout_ver3.0'":
    Fill: =RGBA(0,0,0,0)
    OnVisible: |-
        =//Call Loading animation and set default var values
        UpdateContext(
            {
                locIsLoadingVisible: false,
                locIsResultsLoadingVisible: true,
                locIsDoneLoadingVisible: false,
                locStartLoadingTimer: false,
                locStartDoneTimer: false,
                locLoadingDuration: gblBaseLoadTime,
                locIsErrorModalVisible: false
            }
        );
        
        Reset(galSearchResults);
        
        //Start the loading animation
        UpdateContext({locStartLoadingTimer:true});
        
        //If we have a leftover placeholder booking from the Review Booking page and it's unused delete it
        If(!IsEmpty(colReview_PlaceholderReservation) && !IsBlank(First(colReview_PlaceholderReservation).ID),
            IfError(
                RemoveIf(Reservations, ID = First(colReview_PlaceholderReservation).ID && status.Value = "ON HOLD" && user_email = Blank()),
                //If there's an error also try to patch the error details to the Sharepoint Error list
        
                //If there's an error show the component (error modal)
                UpdateContext({locIsErrorModalVisible: true});
        
                Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Reservations)).Error,
                    error_message: First(Errors(Reservations)).Message, 
                    error_log: "Filter(Reservations, )...",
                    error_origin: App.ActiveScreen 
                }),
                Table()
            )
        );
        
        IfError(
            Concurrent(
                //Search for desks and reservations matching query params on previous page
                ClearCollect(colSearchResults_Desks,
                    Filter(
                        Desks,
                        status.Value = "ACTIVE", 
                        building_id.Value = Text(locBuilding.ID) &&  neighbourhood_id.Value = Text(locNeighbourhood.ID), 
        
                        //If selected Seating Type is not type "All", choose the specific seating type, otherwise we don't filter on seating types so all are shown
                        (locSeatingType.ID <> -1 && seating_type_id.Value = Text(locSeatingType.ID)) Or (locSeatingType.ID = -1 && true)
                    )
                ),
                //COVID restriction of adding cancelled bookings to the list of bookings that are unavailable to book
                // After restriction is removed, only keep status.Value = "BOOKED" for the second filter arg
                ClearCollect(colSearchResults_Bookings,
                    Filter(
                        Reservations,
                        (status.Value = "BOOKED" || status.Value = "CANCELLED"), 
                        start_date = locDate && (timeslot_id.Value = Text(locTimeRange.ID)), 
                        locTimeRange.ID <> gblAllDayTimeslotID || (timeslot_id.Value = Text(gblAllDayTimeslotID))
                    )
                )
            ),
        
            //If there's an error show the component (error modal)
            UpdateContext({locIsErrorModalVisible: true});
        
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
            {   user_email: Lower(gblAppUserDetails.mail), 
                error_code: If(!IsBlank(First(Errors(Desks)).Error), First(Errors(Desks)).Error, First(Errors(Reservations)).Error),
                error_message: If(!IsBlank(First(Errors(Desks)).Message), First(Errors(Desks)).Message, First(Errors(Reservations)).Message), 
                error_log: If(!IsBlank(First(Errors(Desks)).Message), "Filter(Desks, )...", "Filter(Reservations, )..."),
                error_origin: App.ActiveScreen 
            }),
            Table()
        );
        
        //Get the DeskID's of the reserved desks in the reservations
        ClearCollect(colSearchResults_BookedDeskIDs,
            ForAll(
                    colSearchResults_Bookings,
                    If(
                        Not(IsEmpty(desk_id)),
                        desk_id.Value,
                        ""
                    )
            ).Value
        );
        
        //Find available desks (desks that aren't reserved)
        ClearCollect(colSearchResults_AvailableDeskIDs,
         SortByColumns(
                    Filter(
                        colSearchResults_Desks,
                        Not(ID in colSearchResults_BookedDeskIDs)
                    ),
                    "ID"
            )
        );
        
        ClearCollect(colMyResults_DesksInCurrSeatingArrangement, colSearchResults_Desks);
        
        Concurrent(
        
            //Used to display intellegent no results found prompts
            ClearCollect(colMyResults_DesksInCurrSeatingArrangement,
                If(!LookUp(colMyResultsFilter, ID = 1, Enabled) && !LookUp(colMyResultsFilter, ID = 2, Enabled) && !LookUp(colMyResultsFilter, ID = 3, Enabled),
                    colSearchResults_Desks,
                    Filter(
                        colSearchResults_Desks,
                        (LookUp(colMyResultsFilter, ID = 1, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                            LookUp(
                                colSeatingArrangementTable,
                                seating_arrangement_name_en = "Quiet",
                                ID
                            )
                        )) || (LookUp(colMyResultsFilter, ID = 2, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                            LookUp(
                                colSeatingArrangementTable,
                                seating_arrangement_name_en = "Transitional",
                                ID
                            )
                        )) || (LookUp(colMyResultsFilter, ID = 3, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                            LookUp(
                                colSeatingArrangementTable,
                                seating_arrangement_name_en = "Interactive",
                                ID
                            )
                        ))
                    )
                )
            ),
        
            //Retain past seating arrangement filter selections and sort by desk name
            ClearCollect(
                colMyResults_Results,
                Sort(
                If(
                    !LookUp(colMyResultsFilter, ID = 1, Enabled) && !LookUp(colMyResultsFilter, ID = 2, Enabled) && !LookUp(colMyResultsFilter, ID = 3, Enabled),
                    colSearchResults_AvailableDeskIDs,
                    Filter(
                        colSearchResults_AvailableDeskIDs,
                        (LookUp(colMyResultsFilter, ID = 1, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                            LookUp(
                                colSeatingArrangementTable,
                                seating_arrangement_name_en = "Quiet",
                                ID
                            )
                        )) || (LookUp(colMyResultsFilter, ID = 2, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                            LookUp(
                                colSeatingArrangementTable,
                                seating_arrangement_name_en = "Transitional",
                                ID
                            )
                        )) || (LookUp(colMyResultsFilter, ID = 3, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                            LookUp(
                                colSeatingArrangementTable,
                                seating_arrangement_name_en = "Interactive",
                                ID
                            )
                        ))
                    )
                ), 
                If(IsMatch(Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en), Letter, Contains),
                    First(Split(Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en), Letter)).Result
                ),
                Ascending
                )
            )
        );
        
        Concurrent(
        
            //Finds the longest desk name and is used to set the size of the gallery template height
            UpdateContext({locLongestSeatingTypeName: 
                LookUp(colSeatingTypeTable, ID = 
                    If(locSeatingType.ID = -1,
                        //All was selected so parse through all available seating types from previous page
                        First(
                            Sort(
                                ForAll(Filter(colSearch_SeatingTypes, ID > 0) As seat_type,
                                    {
                                            ID: seat_type.ID,
                                            Len: Switch(
                                                gblAppUserLang,
                                                "fr",
                                                Len(seat_type.Result),
                                                Len(seat_type.Result)
                                            )
                                    }
                                ),
                            Len,
                            Descending
                            )
                        ).ID,
                        locSeatingType.ID
                    ),
                Switch(gblAppUserLang, "fr", seating_type_name_fr, seating_type_name_en)
                )
            }),
        
            //Finds the longest desk name and is used to set the size of the gallery template height
            UpdateContext({locLongestDeskName: 
            LookUp(colMyResults_Results, ID = 
                First(
                    Sort(
                        ForAll(
                            colMyResults_Results As search_result,
                            {
                                ID: search_result.ID,
                                Len: Switch(
                                    gblAppUserLang,
                                    "fr",
                                    Len(search_result.desk_name_fr),
                                    Len(search_result.desk_name_en)
                                )
                            }
                        ),
                    Len,
                    Descending
                    )
                ).ID,
                Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en)
            )
            }),
        
            UpdateContext({locLongestSeatName: 
            LookUp(colMyResults_Results, ID = 
                First(
                    Sort(
                        ForAll(
                            colMyResults_Results As search_result,
                            {
                                ID: search_result.ID,
                                Len: Switch(
                                    gblAppUserLang,
                                    "fr",
                                    Len(search_result.desk_name_fr) + Len(LookUp(colSeatingTypeTable, ID = search_result.seating_type_id.Id, seating_type_name_fr)),
                                    Len(search_result.desk_name_en) + Len(LookUp(colSeatingTypeTable, ID = search_result.seating_type_id.Id, seating_type_name_en))
                                )
                            }
                        ),
                    Len,
                    Descending
                    )
                ).ID,
                Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en) & " - " & LookUp(colSeatingTypeTable, ID = seating_type_id.Id, Switch(gblAppUserLang, "fr",seating_type_name_fr, seating_type_name_en))
            )
            }),
        
            UpdateContext({locLongestSeatTag: 
                LookUp(colMyResults_Results, ID = 
                    First(
                        Sort(
                            ForAll(
                                colMyResults_Results As search_result,
                                {
                                    ID: search_result.ID,
                                    Len: Len(Concat(search_result.workstation_specifics As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(search_result.workstation_specifics).Value <> tag.Value, ", ")))
                                }
                            ),
                        Len,
                        Descending
                        )
                    ).ID,
                    Concat(workstation_specifics As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(workstation_specifics).Value <> tag.Value, ", ")))
            })
        
        );
        
        //Stop the timer
        UpdateContext({locLoadingDuration: 0});

    shpScreenBackdropRS As rectangle:
        BorderColor: =RGBA(255, 255, 255, 1)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Fill: =RGBA(224, 224, 224,1)
        Height: =Parent.Height
        Width: =Parent.Width
        ZIndex: =1

    shpPageBackdropRS As rectangle:
        BorderColor: =RGBA(204, 204, 204, 1)
        BorderThickness: =2
        Fill: =LookUp(Colors, Color = "Background", RGB)
        FocusedBorderThickness: =4
        Height: =Parent.Height
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width, App.DesignWidth * 2)
        X: =(Parent.Width-Self.Width) /2
        ZIndex: =2

    shpCrdTemplateSizing As rectangle:
        BorderColor: =RGBA(0, 0, 0, 0)
        Fill: =RGBA(0, 0, 0, 0)
        Height: |+
            =(imgSeatingArrangementPillRS.Y) + imgSeatingArrangementPillRS.Height +
            Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            ) +
            Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            ) +
            lblSeatNameRSHeight.Text +
            Min(5 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               5 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            ) + 
            lblWorkstationSpecificsRSHeight.Text +
            Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            ) +
            Max(imgDateRS.Height, lblDateRS.Height) +
            Min(8 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               8 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            ) +
            Max(imgTimeRS.Height, lblTimeRS.Height) +
            Min(8 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               8 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            ) +
            Max(imgBuildingRS.Height, lblBuildingRS.Height) +
            Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            )
            
        Width: =0
        X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
        Y: =shpPageBackdropRS.Y + shpPageBackdropRS.Height
        ZIndex: =3

    timLoadingRS As timer:
        AutoPause: =false
        Duration: =locLoadingDuration
        Height: =125
        OnTimerEnd: |-
            =UpdateContext({locIsLoadingVisible: false, locStartLoadingTimer:false});
            UpdateContext({ locStartDoneTimer:true});
        OnTimerStart: |-
            =UpdateContext({locIsLoadingVisible: true});
        Reset: =true
        Start: =locStartLoadingTimer
        Visible: =false
        Width: =32
        X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
        Y: =shpPageBackdropRS.Y + shpPageBackdropRS.Height
        ZIndex: =6

    timDoneLoadingRS As timer:
        Duration: =2000
        Height: =125
        OnTimerEnd: |-
            =UpdateContext({locIsDoneLoadingVisible:false, locStartDoneTimer:false});
        OnTimerStart: |-
            =UpdateContext({locIsDoneLoadingVisible: true, locIsResultsLoadingVisible: false});
        Reset: =true
        Start: =locStartDoneTimer
        Visible: =false
        Width: =32
        X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
        Y: =shpPageBackdropRS.Y + shpPageBackdropRS.Height
        ZIndex: =7

    "galSearchResults As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
        AccessibleLabel: =LookUp(colTranslationTable, key = "bookingresults.chooseaseat" && language.Value = gblAppUserLang, text)
        DisplayMode: =If(!IsEmpty(colMyResults_Results) || locIsLoadingVisible, DisplayMode.Edit, DisplayMode.Disabled)
        Fill: =LookUp(Colors, Color = "Background", RGB)
        FocusedBorderColor: =
        FocusedBorderThickness: =0
        Height: |-
            =//Parent.Height - galSearchResults.Y - NavRS.Height + galSearchResults.TemplatePadding/2 + Self.FocusedBorderThickness
            (cmpNavRS.Y - (cntrFilterToggle.Y + cntrFilterToggle.Height + 
            Min(30 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25, 
                    ScreenSize.Large, 1.5,
                    2),
                 30 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25, 
                    ScreenSize.Large, 1.5,
                    2)
            )/2 ))
        Items: =colMyResults_Results
        Layout: =Layout.Vertical
        OnSelect: |
            =Navigate(
                'Review Booking Screen',
                ScreenTransition.Cover,
                {
                    locSelectedResult: ThisItem,
                    locSelectedDate: locDate,
                    locSelectedTimeRange: locTimeRange,
                    locSelectedFloor: locFloor,
                    locSelectedNeighbourhood: locNeighbourhood,
                    locSelectedUser: Blank()
                }
            );
        Selectable: =false
        ShowScrollbar: =!IsEmpty(colMyResults_Results) || !crdLoadingPageRS.Visible
        TemplatePadding: =0
        TemplateSize: |-
            =shpCrdTemplateSizing.Height + 
            Min(25 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
               25 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)     
            )
        Transition: =Transition.Pop
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: |-
            =cntrFilterToggle.Y + cntrFilterToggle.Height + 
            Min(30 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25, 
                    ScreenSize.Large, 1.5,
                    2),
                 30 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25, 
                    ScreenSize.Large, 1.5,
                    2)
            )   
        ZIndex: =8

        lblSeatNameRSHeight As label:
            Height: =0
            OnSelect: =Select(Parent)
            Size: =0
            Text: =lblSeatNameRS.Height
            Visible: =false
            Width: =0
            ZIndex: =1

        lblWorkstationSpecificsRSHeight As label:
            Height: =0
            OnSelect: =Select(Parent)
            Size: =0
            Text: =lblWorkstationSpecificsRS.Height
            Visible: =false
            Width: =0
            ZIndex: =2

        crdSeatingRS As button:
            BorderColor: =RGBA(0,0,0,0)
            BorderThickness: =0
            Fill: =RGBA(255, 255, 255, 1)
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Height: |
                =Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                ) + 
                Max(imgBuildingRS.Y + imgBuildingRS.Height, lblBuildingRS.Y + lblBuildingRS.Height) - imgSeatingArrangementPillRS.Y +
                Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            HoverBorderColor: =RGBA(0,0,0,0)
            HoverColor: =Self.Color
            HoverFill: =Self.Fill
            OnSelect: =Select(Parent)
            PressedColor: =Self.HoverColor
            PressedFill: =Self.HoverFill
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(15 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    15 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =0
            Text: ="Book Seat" & lblSeatNameRS.Text
            Width: |-
                =shpPageBackdropRS.Width
                - (10 * Switch(Value(lblScreenWidthSizingRBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
                - (25 * Switch(Value(lblScreenWidthSizingRBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
            X: =galSearchResults.Width/2 - Self.Width/2
            Y: =Self.FocusedBorderThickness * 2
            ZIndex: =3

        imgBuildingRS As image:
            Height: =Self.Width
            Image: ='location_pin (grey)'
            OnSelect: =Select(Parent)
            Width: |-
                =Min(16 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2),
                    16 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2)
                    )
            X: =imgSeatingArrangementPillRS.X
            Y: =lblBuildingRS.Y + lblBuildingRS.Height/2 - Self.Height/2
            ZIndex: =4

        lblBuildingRS As label:
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.Lato
            Height: =0
            LineHeight: =1
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingLeft: =1
            PaddingRight: =1
            PaddingTop: =2
            Size: |-
                =Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                )
            Text: =Switch(gblAppUserLang, "fr", locBuilding.building_add_fr & " (" & locBuilding.building_name_fr & ")", locBuilding.building_add_en & " (" & locBuilding.building_name_en & ")")
            Width: |-
                =Min(
                    Len(Self.Text) * Self.Size, 
                
                    (crdSeatingRS.Width + crdSeatingRS.X - Self.X) - 
                    Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,  
                            2),
                        15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,  
                            2))
                )
            X: =imgBuildingRS.X + imgBuildingRS.Width * 1.75
            Y: |-
                =lblTimeRS.Y + lblTimeRS.Height +
                Min(8 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   8 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            ZIndex: =5

        imgTimeRS As image:
            Height: =Self.Width
            Image: ='clock (grey)'
            OnSelect: =Select(Parent)
            Width: |-
                =Min(16 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2),
                    16 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2)
                    )
            X: =imgSeatingArrangementPillRS.X
            Y: =lblTimeRS.Y + lblTimeRS.Height/2 - Self.Height/2
            ZIndex: =6

        lblTimeRS As label:
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.Lato
            Height: =0
            LineHeight: =1
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingLeft: =1
            PaddingRight: =1
            PaddingTop: =2
            Size: |-
                =Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                )
            Text: =Switch(gblAppUserLang, "fr", locTimeRange.time_range_fr, locTimeRange.time_range_en)
            Width: |-
                =Min(
                    Len(Self.Text) * Self.Size, 
                
                    (crdSeatingRS.Width + crdSeatingRS.X - Self.X) - 
                    Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,  
                            2),
                        15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,  
                            2))
                )
            X: =imgTimeRS.X + imgTimeRS.Width * 1.75
            Y: |-
                =lblDateRS.Y + lblDateRS.Height +
                Min(8 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   8 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            ZIndex: =7

        imgDateRS As image:
            Height: =Self.Width
            Image: ='calendar (grey)'
            OnSelect: =Select(Parent)
            Width: |-
                =Min(16 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2),
                    16 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2)
                    )
            X: =imgSeatingArrangementPillRS.X
            Y: =lblDateRS.Y + lblDateRS.Height/2 - Self.Height/2
            ZIndex: =8

        lblDateRS As label:
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.Lato
            Height: =0
            LineHeight: =1
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingLeft: =1
            PaddingRight: =1
            PaddingTop: =2
            Size: |-
                =Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                )
            Text: |-
                =Proper(Switch(gblAppUserLang, "fr", 
                    Text(locDate,
                    "[$-en-US]dddd d, mmmm, yyyy",
                    "fr-FR"),     
                    
                    Text(locDate,
                    "[$-en-US]dddd, mmmm d, yyyy",
                    "en-CA"
                    )))
            Width: |-
                =Min(
                    Len(Self.Text) * Self.Size, 
                
                    (crdSeatingRS.Width + crdSeatingRS.X - Self.X) - 
                    Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,  
                            2),
                        15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,  
                            2))
                )
            X: =imgDateRS.X + imgDateRS.Width * 1.75
            Y: |-
                =lblWorkstationSpecificsRS.Y + lblWorkstationSpecificsRS.Height +
                Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            ZIndex: =9

        lblWorkstationSpecificsRS As label:
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            DisabledColor: =Self.Color
            Font: =Font.Lato
            FontWeight: =FontWeight.Bold
            Height: =
            LineHeight: =1
            OnSelect: =Select(Parent)
            PaddingBottom: =0
            PaddingLeft: =1
            PaddingRight: =1
            PaddingTop: =0
            Size: |-
                =Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                )
            Text: =Concat(ThisItem.workstation_specifics As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(ThisItem.workstation_specifics).Value <> tag.Value, ", "))
            Width: |-
                =(crdSeatingRS.X + crdSeatingRS.Width) -
                Self.X -
                15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
            X: =imgSeatingArrangementPillRS.X
            Y: |-
                =lblSeatNameRS.Y + lblSeatNameRS.Height +
                Min(5 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   5 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            ZIndex: =10

        lblSeatNameRS As label:
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            DisabledColor: =Self.Color
            Font: =Font.'Lato Black'
            FontWeight: =FontWeight.Bold
            Height: =
            OnSelect: =Select(Parent)
            PaddingBottom: =1
            PaddingLeft: =1
            PaddingRight: =1
            PaddingTop: |
                =1
            Role: =TextRole.Heading4
            Size: |
                =Min(16 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    16 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                    )
            Text: =Switch(gblAppUserLang, "en", ThisItem.desk_name_en, "fr", ThisItem.desk_name_fr) & " - " & LookUp(colSeatingTypeTable, ID = ThisItem.seating_type_id.Id, Switch(gblAppUserLang, "fr", seating_type_name_fr, seating_type_name_en))
            Width: |-
                =(crdSeatingRS.X + crdSeatingRS.Width) -
                Self.X -
                15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
            X: =imgSeatingArrangementPillRS.X
            Y: |-
                =imgSeatingArrangementPillRS.Y + imgSeatingArrangementPillRS.Height +
                Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            ZIndex: =11

        icoSeatingArrangementRS As image:
            Height: =icoSeatingArrangementRS.Width
            Image: =LookUp(colSeatingArrangementTable, ID = ThisItem.seating_arrangement_id.Id, icon_link)
            OnSelect: =Select(Parent)
            Width: |-
                =If(
                    LookUp(
                        colSeatingArrangementTable,
                        ID = ThisItem.seating_arrangement_id.Id,
                        ID
                    ) <> LookUp(colSeatingArrangementTable, ID = 3, ID),
                    Min(25 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2),
                    25 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2)
                    ),
                    Min(50 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2),
                    50 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2)
                    )
                )
            X: |-
                =imgSeatingArrangementPillRS.X + imgSeatingArrangementPillRS.Width + 
                12.5 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        2)
            Y: =imgSeatingArrangementPillRS.Y + imgSeatingArrangementPillRS.Height/2 - Self.Height/2
            ZIndex: =12

        imgSeatingTypeRS As image:
            BorderStyle: =BorderStyle.None
            Fill: =RGBA(255, 255, 255, 1)
            Height: =Max(imgBuildingRS.Y + imgBuildingRS.Height, lblBuildingRS.Y + lblBuildingRS.Height) - imgSeatingArrangementPillRS.Y
            Image: =ThisItem.desk_image
            OnSelect: =Select(Parent)
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(15 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    15 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Width: =Min(crdSeatingRS.Width * 0.35, Self.Height)
            X: |-
                =crdSeatingRS.X + 
                15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
            Y: =imgSeatingArrangementPillRS.Y
            ZIndex: =13

        icoFloorPlanRS As image:
            AccessibleLabel: =LookUp(colTranslationTable, key = "bookingresults.card.floorplan" && language.Value = gblAppUserLang, text)
            BorderColor: =RGBA(0,0,0,0)
            Fill: =LookUp(Colors, Color = "Background", RGB)
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Height: =Self.Width
            HoverBorderColor: =RGBA(0,0,0,0)
            HoverFill: =RGBA(0,0,0,0.1)
            Image: ='attachment (purple)'
            OnSelect: |-
                =//Navigate to floorplan page
                Navigate(
                    'Floorplan Screen',
                    ScreenTransition.Cover,
                    {
                        locFloorplanLink: ThisItem.desk_floor_plan_url,
                        locSeatName: Switch(
                            gblAppUserLang,
                            "fr",
                            ThisItem.desk_name_fr,
                            ThisItem.desk_name_en
                        )
                    }
                )
            PaddingBottom: =Self.PaddingTop
            PaddingLeft: =Self.PaddingTop
            PaddingRight: =Self.PaddingTop
            PaddingTop: |
                =Min(6 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        1.9),
                    6 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        1.9)
                    )
            PressedBorderColor: =RGBA(0,0,0,0)
            PressedFill: =Self.HoverFill
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(10 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    10 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            TabIndex: =0
            Width: |
                =Min(40 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        1.9),
                    40 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        1.9)
                    )
            X: |-
                =(crdSeatingRS.X + crdSeatingRS.Width) - Self.Width - 
                Min(10 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   10 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            Y: |-
                =crdSeatingRS.Y + 
                Min(10 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   10 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            ZIndex: =14

        imgSeatingArrangementPillRS As image:
            DisabledFill: =RGBA(0,0,0,0)
            Height: |-
                =Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                ) * 2.3
            HoverBorderColor: =RGBA(0,0,0,0)
            Image: |
                =Switch(
                    LookUp(
                        colSeatingArrangementTable,
                        ID = ThisItem.seating_arrangement_id.Id,
                        ID
                    ),
                    LookUp(colSeatingArrangementTable, ID = 1, ID),
                    purple_pill,
                    LookUp(colSeatingArrangementTable, ID = 2, ID),
                    red_pill,
                    LookUp(colSeatingArrangementTable, ID = 3, ID),
                    green_pill
                )
            OnSelect: =Select(Parent)
            PressedBorderColor: =RGBA(0,0,0,0)
            PressedFill: =RGBA(0,0,0,0)
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(5 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    5 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Width: |
                =Max(colSeatingArrangementTable, Len(seating_arrangement_name_en)) * 
                Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                )
            X: |-
                =imgSeatingTypeRS.X + imgSeatingTypeRS.Width + 
                (15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,
                        2))
            Y: |-
                =crdSeatingRS.Y + 
                Min(15 *  Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                   15 *  Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)     
                )
            ZIndex: =15

        lblSeatingArrangementTextRS As label:
            Align: =Align.Center
            Font: =Font.Lato
            FontWeight: =FontWeight.Semibold
            Height: =imgSeatingArrangementPillRS.Height
            OnSelect: =Select(Parent)
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: |-
                =Min(12 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9),
                    12 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.35,
                        ScreenSize.Large, 1.65,  
                        1.9)
                )
            Text: =LookUp(colSeatingArrangementTable, ID = ThisItem.seating_arrangement_id.Id, If(gblAppUserLang = "en", seating_arrangement_name_en, seating_arrangement_name_fr))
            Width: =imgSeatingArrangementPillRS.Width
            X: =imgSeatingArrangementPillRS.X
            Y: =imgSeatingArrangementPillRS.Y
            ZIndex: =16

    lblSearchResultsListHeadingRS As label:
        Height: =0
        Role: =TextRole.Heading3
        Size: =0
        Text: =LookUp(colTranslationTable, key = "bookingresults.results.list" && language.Value = gblAppUserLang, text)
        Width: =0
        X: =galSearchResults.X
        Y: =galSearchResults.Y - 1
        ZIndex: =13

    btnTriggerFilter As button:
        BorderThickness: =0
        Height: =0
        OnSelect: |-
            =Concurrent(
                UpdateContext(
                    {
                        locIsLoadingVisible: false,
                        locIsResultsLoadingVisible: true,
                        locIsDoneLoadingVisible: false,
                        locStartLoadingTimer: true,
                        locStartDoneTimer: false,
                        locLoadingDuration: gblBaseLoadTime
                    }),
                ClearCollect(
                    colMyResults_Results,
                    Sort(
                        If(
                            !LookUp(colMyResultsFilter, ID = 1, Enabled) && !LookUp(colMyResultsFilter, ID = 2, Enabled) && !LookUp(colMyResultsFilter, ID = 3, Enabled),
                            colSearchResults_AvailableDeskIDs,
                            Filter(
                                colSearchResults_AvailableDeskIDs,
                                (LookUp(colMyResultsFilter, ID = 1, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                                    LookUp(
                                        colSeatingArrangementTable,
                                        seating_arrangement_name_en = "Quiet",
                                        ID
                                    )
                                )) || (LookUp(colMyResultsFilter, ID = 2, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                                    LookUp(
                                        colSeatingArrangementTable,
                                        seating_arrangement_name_en = "Transitional",
                                        ID
                                    )
                                )) || (LookUp(colMyResultsFilter, ID = 3, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                                    LookUp(
                                        colSeatingArrangementTable,
                                        seating_arrangement_name_en = "Interactive",
                                        ID
                                    )
                                ))
                            )
                        ), 
                        If(IsMatch(Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en), Letter, Contains),
                            First(Split(Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en), Letter)).Result
                        ),
                    Ascending
                    )
                ),
                ClearCollect(colMyResults_DesksInCurrSeatingArrangement,
                    If(!LookUp(colMyResultsFilter, ID = 1, Enabled) && !LookUp(colMyResultsFilter, ID = 2, Enabled) && !LookUp(colMyResultsFilter, ID = 3, Enabled),
                        colSearchResults_Desks,
                        Filter(
                            colSearchResults_Desks,
                            (LookUp(colMyResultsFilter, ID = 1, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                                LookUp(
                                    colSeatingArrangementTable,
                                    seating_arrangement_name_en = "Quiet",
                                    ID
                                )
                            )) || (LookUp(colMyResultsFilter, ID = 2, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                                LookUp(
                                    colSeatingArrangementTable,
                                    seating_arrangement_name_en = "Transitional",
                                    ID
                                )
                            )) || (LookUp(colMyResultsFilter, ID = 3, Enabled) && ThisRecord.seating_arrangement_id.Value = Text(
                                LookUp(
                                    colSeatingArrangementTable,
                                    seating_arrangement_name_en = "Interactive",
                                    ID
                                )
                            ))
                        )
                    )
                )
            );
            
            UpdateContext({locLoadingDuration: 0});
        PaddingBottom: =0
        PaddingLeft: =0
        PaddingRight: =0
        PaddingTop: =0
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =0
        Text: =""
        Visible: =false
        Width: =0
        Y: =shpPageBackdropRS.Y + shpPageBackdropRS.Height
        ZIndex: =14

    cntrFilterToggle As groupContainer:
        Height: =btnFilterArrangement_Quiet.Height + btnFilterArrangement_Quiet.FocusedBorderThickness
        Visible: =!locIsResultsLoadingVisible
        Width: |-
            =shpPageBackdropRS.Width
            - (10 * Switch(Value(lblScreenWidthSizingRBS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5))
            - (25 * Switch(Value(lblScreenWidthSizingRBS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5))
        X: =shpPageBackdropRS.X + shpPageBackdropRS.Width/2 - Self.Width/2
        Y: |-
            =lblFilterSeatArrangement.Y + lblFilterSeatArrangement.Height +
            Min(15 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
                15 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)
            )
        ZIndex: =15

        btnFilterArrangement_Interactive As button:
            AutoDisableOnSelect: =false
            BorderColor: |-
                =Switch(LookUp(colMyResultsFilter, ID = 3, Enabled), 
                    true, 
                    RGBA(0,0,0,0), 
                    LookUp(Colors, Color = "Light Grey", RGB)
                )
            BorderThickness: |-
                =Switch(LookUp(colMyResultsFilter, ID = 3, Enabled), 
                    true, 
                    0, 
                    Min(2 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                        2 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                    )
                )
            Color: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 3, Enabled),
                    LookUp(
                        Colors,
                        Color = "Primary",
                        RGB
                    ),
                    LookUp(
                        Colors,
                        Color = "Grey",
                        RGB
                    )
                )
            Fill: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 3, Enabled),
                    LookUp(
                        Colors,
                        Color = "Green",
                        RGB
                    ),
                    Color.White
                )
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Font: =Font.Lato
            Height: =Self.Size * 2.25
            HoverBorderColor: =Self.BorderColor
            HoverColor: =Self.Color
            HoverFill: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 3, Enabled),
                    ColorFade(
                    LookUp(
                        Colors,
                        Color = "Green",
                        RGB
                    ), -20%),
                    RGBA(0, 0, 0, 0.20)
                )
            OnSelect: |-
                =Patch(colMyResultsFilter, LookUp(colMyResultsFilter, ID = 3), { Enabled: !LookUp(colMyResultsFilter, ID = 3, Enabled)});
                Select(btnTriggerFilter);
            PressedBorderColor: =Self.BorderColor
            PressedColor: =Self.Color
            PressedFill: =Self.HoverFill
            RadiusBottomLeft: |
                =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: =btnFilterArrangement_Quiet.RadiusTopLeft
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =btnFilterArrangement_Quiet.Size
            Text: |-
                =LookUp(
                            colSeatingArrangementTable,
                            ID = 3,
                            If(
                                gblAppUserLang = "fr",
                                seating_arrangement_name_fr,
                                seating_arrangement_name_en
                            )
                        )
            Width: =btnFilterArrangement_Quiet.Width
            X: =cntrFilterToggle.Width - galSearchResults.TemplatePadding - Self.Width - btnFilterArrangement_Interactive.FocusedBorderThickness
            Y: =cntrFilterToggle.Height/2 - Self.Height/2
            ZIndex: =1

        btnFilterArrangement_Transitional As button:
            AutoDisableOnSelect: =false
            BorderColor: |-
                =Switch(LookUp(colMyResultsFilter, ID = 2, Enabled), 
                    true, 
                    RGBA(0,0,0,0), 
                    LookUp(Colors, Color = "Light Grey", RGB)
                )
            BorderThickness: |-
                =Switch(LookUp(colMyResultsFilter, ID = 2, Enabled), 
                    true, 
                    0, 
                    Min(2 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                        2 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                    )
                )
            Color: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 2, Enabled),
                    LookUp(
                        Colors,
                        Color = "Primary",
                        RGB
                    ),
                    LookUp(
                        Colors,
                        Color = "Grey",
                        RGB
                    )
                )
            Fill: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 2, Enabled),
                    LookUp(
                        Colors,
                        Color = "Red",
                        RGB
                    ),
                    Color.White
                )
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Font: =Font.Lato
            Height: =Self.Size * 2.25
            HoverBorderColor: =Self.BorderColor
            HoverColor: =Self.Color
            HoverFill: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 2, Enabled),
                    ColorFade(
                    LookUp(
                        Colors,
                        Color = "Red",
                        RGB
                    ), -20%),
                    RGBA(0, 0, 0, 0.20)
                )
            OnSelect: |-
                =Patch(colMyResultsFilter, LookUp(colMyResultsFilter, ID = 2), { Enabled: !LookUp(colMyResultsFilter, ID = 2, Enabled)});
                Select(btnTriggerFilter);
            PressedBorderColor: =Self.BorderColor
            PressedColor: =Self.HoverColor
            PressedFill: =Self.HoverFill
            RadiusBottomLeft: |
                =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: =btnFilterArrangement_Quiet.RadiusTopLeft
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =btnFilterArrangement_Quiet.Size
            Text: |-
                =LookUp(
                            colSeatingArrangementTable,
                            ID = 2,
                            If(
                                gblAppUserLang = "fr",
                                seating_arrangement_name_fr,
                                seating_arrangement_name_en
                            )
                        )
            Width: =btnFilterArrangement_Quiet.Width
            X: =cntrFilterToggle.Width/2 - Self.Width/2 - btnFilterArrangement_Transitional.FocusedBorderThickness/2
            Y: =cntrFilterToggle.Height/2 - Self.Height/2
            ZIndex: =2

        btnFilterArrangement_Quiet As button:
            AutoDisableOnSelect: =false
            BorderColor: |-
                =Switch(LookUp(colMyResultsFilter, ID = 1, Enabled), 
                    true, 
                    RGBA(0,0,0,0), 
                    LookUp(Colors, Color = "Light Grey", RGB)
                )
            BorderThickness: |-
                =Switch(LookUp(colMyResultsFilter, ID = 1, Enabled), 
                    true, 
                    0, 
                    Min(2 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                        2 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                    )
                )
            Color: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 1, Enabled),
                    LookUp(
                        Colors,
                        Color = "Primary",
                        RGB
                    ),
                    LookUp(
                        Colors,
                        Color = "Grey",
                        RGB
                    )
                )
            Fill: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 1, Enabled),
                    LookUp(
                        Colors,
                        Color = "Purple",
                        RGB
                    ),
                    Color.White
                )
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Font: =Font.Lato
            Height: =Self.Size * 2.25
            HoverBorderColor: =Self.BorderColor
            HoverColor: =Self.Color
            HoverFill: |-
                =If(
                    LookUp(colMyResultsFilter, ID = 1, Enabled),
                    ColorFade(
                    LookUp(
                        Colors,
                        Color = "Purple",
                        RGB
                    ), -20%),
                    RGBA(0, 0, 0, 0.20)
                )
            OnSelect: |-
                =Patch(colMyResultsFilter, LookUp(colMyResultsFilter, ID = 1), { Enabled: !LookUp(colMyResultsFilter, ID = 1, Enabled)});
                Select(btnTriggerFilter);
            PressedBorderColor: =Self.BorderColor
            PressedColor: =Self.HoverColor
            PressedFill: =Self.HoverFill
            RadiusBottomLeft: |
                =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(15 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    15 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: |-
                =Min(14 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    14 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2) 
                )
            TabIndex: =
            Text: |-
                =LookUp(
                            colSeatingArrangementTable,
                            ID = 1,
                            If(
                                gblAppUserLang = "fr",
                                seating_arrangement_name_fr,
                                seating_arrangement_name_en
                            )
                        )
            Width: |-
                =Min(Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 0.75,  
                        ScreenSize.Medium, 0.95,
                        ScreenSize.Large, 1,  
                        1),
                Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 0.75,  
                        ScreenSize.Medium, 0.95,
                        ScreenSize.Large, 1,  
                        1)
                ) * (cntrFilterToggle.Width)/3.5
            X: =galSearchResults.TemplatePadding + Self.FocusedBorderThickness
            Y: =cntrFilterToggle.Height/2 - Self.Height/2
            ZIndex: =3

    btnSelectAll As button:
        AutoDisableOnSelect: =false
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderThickness: =0
        Color: =LookUp(Colors, Color = "Primary", RGB)
        Fill: =RGBA(0, 0, 0, 0)
        FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
        FocusedBorderThickness: |-
            =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                        ScreenSize.Small, 1,
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,
                        1.75),
                2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                        ScreenSize.Small, 1,
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,
                        1.75)
            )
        Font: =Font.'Lato Black'
        FontWeight: =FontWeight.Bold
        Height: =Self.Size * 1.75
        HoverBorderColor: =Self.BorderColor
        HoverColor: =LookUp(Colors, Color = "Primary", RGB)
        HoverFill: =RGBA(0,0,0,0.1)
        OnSelect: |-
            =If(
                !LookUp(colMyResultsFilter, ID = 1, Enabled) || !LookUp(colMyResultsFilter, ID = 2, Enabled) || !LookUp(colMyResultsFilter, ID = 3, Enabled),
                Concurrent(
                    If(
                        !LookUp(colMyResultsFilter, ID = 1, Enabled),
                        Patch(colMyResultsFilter, LookUp(colMyResultsFilter, ID = 1), { Enabled: !LookUp(colMyResultsFilter, ID = 1, Enabled)})
                    ),
                    If(
                        !LookUp(colMyResultsFilter, ID = 2, Enabled),
                        Patch(colMyResultsFilter, LookUp(colMyResultsFilter, ID = 2), { Enabled: !LookUp(colMyResultsFilter, ID = 2, Enabled)})
                    ),
                    If(
                        !LookUp(colMyResultsFilter, ID = 3, Enabled),
                        Patch(colMyResultsFilter, LookUp(colMyResultsFilter, ID = 3), { Enabled: !LookUp(colMyResultsFilter, ID = 3, Enabled)})
                    )
                );
                Select(btnTriggerFilter);
            )
        PaddingBottom: =0
        PaddingTop: =0
        PressedBorderColor: =Self.BorderColor
        PressedColor: =LookUp(Colors, Color = "Primary", RGB)
        PressedFill: =RGBA(0,0,0,0.2)
        RadiusBottomLeft: =Self.RadiusTopLeft
        RadiusBottomRight: =Self.RadiusTopLeft
        RadiusTopLeft: |-
            =Min(15 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
                15 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)
            )
        RadiusTopRight: =Self.RadiusTopLeft
        Size: =lblFilterSeatArrangement.Size
        Text: =LookUp(colTranslationTable, key = "bookingresults.filter.selectall.label" && language.Value = gblAppUserLang, text)
        Visible: =!locIsResultsLoadingVisible
        Width: =Self.Size * Len(Self.Text) * 0.8
        X: =galSearchResults.X + galSearchResults.Width - galSearchResults.TemplatePadding - Self.Width - (lblFilterSeatArrangement.X - shpPageBackdropRS.X)
        Y: |-
            =cmpHeaderRS.Y + cmpHeaderRS.Height + 
            Min(30 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
                30 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)
            )
        ZIndex: =16

    lblFilterSeatArrangement As label:
        AutoHeight: =true
        Color: =LookUp(Colors, Color = "Primary", RGB)
        Font: =Font.'Lato Black'
        FontWeight: =FontWeight.Bold
        Height: =Self.Size * Self.LineHeight
        PaddingBottom: =0
        PaddingLeft: =//20
        PaddingRight: =//20
        PaddingTop: =0
        Role: =TextRole.Heading3
        Size: |-
            =Min(16 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                16 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2) 
            )
        Text: =LookUp(colTranslationTable, key = "bookingresults.filtertext" && language.Value = gblAppUserLang, text)
        Visible: =!locIsResultsLoadingVisible
        Width: |-
            =//Self.Size * Len(Self.Text) - lblFilterSelectAll.Width
            shpPageBackdropRS.X + shpPageBackdropRS.Width/2 - Self.X
        X: =cntrFilterToggle.X
        Y: |-
            =/*cmpHeaderRS.Y + cmpHeaderRS.Height + 
            Min(30 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2),
                30 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    2)
            )*/
            btnSelectAll.Y + btnSelectAll.Height/2 - Self.Height/2
        ZIndex: =17

    lblSearchResultsHeadingRS As label:
        Height: =0
        PaddingBottom: =0
        PaddingLeft: =0
        PaddingRight: =0
        PaddingTop: =0
        Role: =TextRole.Heading2
        Size: =0
        Text: =LookUp(colTranslationTable, key = "bookingresults.resultssection" && language.Value = gblAppUserLang, text)
        Width: =0
        X: =shpPageBackdropRS.X
        Y: =cmpHeaderRS.Y + cmpHeaderRS.Height
        ZIndex: =20

    cmpNavRS As cmp_MainNav:
        FocusedColor: =LookUp(Colors, Color = "Focus Primary", RGB)
        FontSize: |-
            =Min(10 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                10 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        Height: |-
            =Min(86 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1.25,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                86 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1.25,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        MutedColor: =LookUp(Colors, Color = "Grey", RGB)
        NavigateToText: =LookUp(colTranslationTable, key = "nav.navigate" && language.Value = gblAppUserLang, text)
        NavItems: |-
            =Table(
                {
                    Key: "profile",
                    Label: gblAppUserDetails.givenName,
                    NavigationLink: 'My Profile Screen'
                },
                {
                    Key: "newBooking",
                    Label: LookUp(colTranslationTable, key = "nav.book" && language.Value = gblAppUserLang, text),
                    NavigationLink: 'Search Screen'
                },
                {
                    Key: "bookings",
                    Label: LookUp(colTranslationTable, key = "nav.bookings" && language.Value = gblAppUserLang, text),
                    NavigationLink: 'My Bookings Screen'
                }
            )
        PrimaryColor: =LookUp(Colors, Color = "Primary", RGB)
        ScreenSize_Height: =cmpScreenFunctionsMBS.ScreenSize
        ScreenSize_Width: =Value(lblScreenWidthSizingRS.Text)
        SelectedItem: ="newBooking"
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: =App.Height-cmpNavRS.Height
        ZIndex: =21

    cmpLoadingAnimationRS As cmp_LoadingAnimation:
        Height: =cmpHeaderRS.Height
        IsTextVisible: =locIsLoadingVisible
        LoadingText: =LookUp(colTranslationTable, key = "loading.text" && language.Value = gblAppUserLang, text)
        PrimaryColor: =LookUp(Colors, Color = "Muted Primary", RGB)
        Visible: =true
        X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
        Y: =cmpHeaderRS.Y + cmpHeaderRS.Height/2 - Self.Height/2
        ZIndex: =22

    cmpDoneAnimationRS As cmp_LoadingDoneAnimation:
        DoneLoadingText: =LookUp(colTranslationTable, key = "loadingdone.text" && language.Value = gblAppUserLang, text)
        Height: =cmpHeaderRS.Height
        IsTextVisible: =locIsDoneLoadingVisible
        Visible: =true
        X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
        Y: =cmpHeaderRS.Y + cmpHeaderRS.Height/2 - Self.Height/2
        ZIndex: =23

    grpScreenSizing As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =23

        lblScreenWidthSizingRS As label:
            Height: =0
            Size: =21
            Text: =Parent.Size
            Visible: =false
            Width: =0
            X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
            Y: =shpPageBackdropRS.Y + shpPageBackdropRS.Height
            ZIndex: =4

        cmpScreenFunctionsRS As cmp_ScreenFunctions:
            AppHeight: =App.Height
            AppHeightBreakPoints: =AppHeightBreakpoints
            X: =shpPageBackdropRS.X + shpPageBackdropRS.Width
            Y: =shpPageBackdropRS.Y + shpPageBackdropRS.Height
            ZIndex: =5

    cmpHeaderRS As cmp_PageHeading:
        BackNavigateTo: |-
            =Table({ Key: "navto", NavigationLink: 'Search Screen'})
        BackText: =LookUp(colTranslationTable, key = "header.back" && language.Value = gblAppUserLang, text)
        FocusedColor: =LookUp(Colors, Color = "Focus Primary", RGB)
        FontSize: |-
            =Min(22 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                22 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        HeadingText: =LookUp(colTranslationTable, key = "header.bookingresults" && language.Value = gblAppUserLang, text)
        Height: |-
            =Min(78 * Switch(Value(lblScreenWidthSizingRS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    1.75),
                78 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    1.75)
            )
        PositionOffset: |-
            =//Recreates the card offset using non-dependent properties
            (Parent.Width/2 -
            (If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
            - (10 * Switch(Parent.Size,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5))
            - (25 * Switch(Parent.Size,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5)))/2)
            - shpPageBackdropRS.X
        PrimaryColor: =LookUp(Colors, Color = "Primary", RGB)
        ScreenSize_Height: =cmpScreenFunctionsRS.ScreenSize
        ScreenSize_Width: =Value(lblScreenWidthSizingRS.Text)
        SecondaryColor: =LookUp(Colors, Color = "Background", RGB)
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: |-
            =If(
            Parent.Size=ScreenSize.Small,
            2,
            4
            )
        ZIndex: =24

    grpNoResultsRS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =24

        crdNoResultsRS As button:
            BorderColor: =LookUp(Colors, Color = "Primary", RGB)
            BorderThickness: =0
            Fill: =RGBA(255, 255, 255, 1)
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingRS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsRS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Height: |-
                =400 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 0.75,  
                        ScreenSize.Medium, 1,
                        ScreenSize.Large, 1.5, 
                        2)
            HoverBorderColor: =
            HoverColor: =
            HoverFill: =
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =15 * Switch(
                    Value(lblScreenWidthSizingRS.Text),
                    ScreenSize.Small,
                    1,
                    ScreenSize.Medium,
                    1.5,
                    ScreenSize.Large,
                    1.75,
                    2
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =0
            TabIndex: =If(IsEmpty(colMyResults_Results), 6, -1)
            Text: =lblNoResOrSeatsTitleRS.Text & ". " & lblNoResOrSeatsSubtitleRS.Text 
            Visible: =IsEmpty(colMyResults_Results) && !locIsResultsLoadingVisible
            Width: |-
                =shpPageBackdropRS.Width
                - (10 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
                - (25 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
            X: =shpPageBackdropRS.X + shpPageBackdropRS.Width/2 - Self.Width/2
            Y: |-
                =(cntrFilterToggle.Y + cntrFilterToggle.Height + cmpNavRS.Y)/2 - 
                (Self.Height)/2
            ZIndex: =9

        lblNoResOrSeatsSubtitleRS As label:
            Align: =Align.Center
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.'Lato Black'
            Height: =70
            PaddingLeft: =10
            PaddingRight: =10
            Size: |-
                =Min(14 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    14 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            Text: |-
                =If(IsEmpty(colMyResults_Results),
                    If(!IsEmpty(colMyResults_DesksInCurrSeatingArrangement),
                        LookUp(
                            colTranslationTable,
                            key = "bookingresults.noseats.subtitle" && language.Value = gblAppUserLang,
                            text
                        ),
                        LookUp(
                            colTranslationTable,
                            key = "bookingresults.noresults.subtitle" && language.Value = gblAppUserLang,
                            text
                        )
                    )
                ) 
            Visible: =IsEmpty(colMyResults_Results) && !locIsResultsLoadingVisible
            Width: =crdNoResultsRS.Width/1.25
            X: =crdNoResultsRS.X + crdNoResultsRS.Width/2 - Self.Width/2
            Y: |-
                =lblNoResOrSeatsTitleRS.Y + lblNoResOrSeatsTitleRS.Height + 
                Min(10 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    10 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            ZIndex: =10

        lblNoResOrSeatsTitleRS As label:
            Align: =Align.Center
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.'Lato Black'
            Height: =70
            PaddingLeft: =10
            PaddingRight: =10
            Size: |-
                =Min(22 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    22 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            Text: |-
                =If(IsEmpty(colMyResults_Results),
                    If(!IsEmpty(colMyResults_DesksInCurrSeatingArrangement),
                        LookUp(
                            colTranslationTable,
                            key = "bookingresults.noseats.title" && language.Value = gblAppUserLang,
                            text
                        ),
                        LookUp(
                            colTranslationTable,
                            key = "bookingresults.noresults.title" && language.Value = gblAppUserLang,
                            text
                        )
                    )
                ) 
            Visible: =IsEmpty(colMyResults_Results) && !locIsResultsLoadingVisible
            Width: =crdNoResultsRS.Width/1.25
            X: =crdNoResultsRS.X + crdNoResultsRS.Width/2 - Self.Width/2
            Y: |-
                =imgNoResOrSeatsRS.Y + imgNoResOrSeatsRS.Height + 
                Min(18 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    18 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            ZIndex: =11

        imgNoResOrSeatsRS As image:
            Height: =Self.Width
            Image: |
                =If(IsEmpty(colMyResults_Results),
                    If(!IsEmpty(colMyResults_DesksInCurrSeatingArrangement),
                        alert_circle,
                        search
                    )
                ) 
            Visible: =IsEmpty(colMyResults_Results) && !locIsResultsLoadingVisible
            Width: =Min(crdNoResultsRS.Width/2, crdNoResultsRS.Height/3)
            X: =crdNoResultsRS.X + crdNoResultsRS.Width/2 - Self.Width/2
            Y: |-
                =crdNoResultsRS.Y + crdNoResultsRS.Height/2 - 
                (Self.Height + 
                Min(18 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    18 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                ) +
                lblNoResOrSeatsTitleRS.Height +
                lblNoResOrSeatsSubtitleRS.Height)/2
            ZIndex: =12

    cmpErrorModalRS As cmp_ErrorModal:
        Color_Background: =LookUp(Colors, Color = "Background", RGB)
        Color_Focused: =LookUp(Colors, Color = "Focus Primary", RGB)
        Color_Primary: =LookUp(Colors, Color = "Primary", RGB)
        Display_ErrorSubtitle: =LookUp(colTranslationTable, key = "errorpage.subtitle" && language.Value = gblAppUserLang, text)
        Display_ErrorTitle: =LookUp(colTranslationTable, key = "errorpage.title" && language.Value = gblAppUserLang, text)
        Height: =shpPageBackdropRS.Height
        ModalHeight: =shpPageBackdropRS.Height
        ModalWidth: =shpPageBackdropRS.Width
        ScreenSize_Height: =cmpScreenFunctionsRS.ScreenSize
        ScreenSize_Width: =lblScreenWidthSizingRS.Text
        Visible: =locIsErrorModalVisible
        Width: =shpPageBackdropRS.Width
        X: =shpPageBackdropRS.X
        Y: =shpPageBackdropRS.Y
        ZIndex: =25

    grpLoadingPageRS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =30

        crdLoadingPageRS As button:
            BorderColor: =LookUp(Colors, Color = "Primary", RGB)
            BorderThickness: =0
            DisplayMode: =DisplayMode.View
            Fill: =RGBA(255, 255, 255, 1)
            Height: |-
                =cmpNavRS.Y - lblFilterSeatArrangement.Y +
                Min(30 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2),
                     30 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2)
                )/2
            HoverBorderColor: =
            HoverColor: =
            HoverFill: =
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(10 * Switch(Value(lblScreenWidthSizingRS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    10 * Switch(cmpScreenFunctionsRS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =0
            TabIndex: =-1
            Text: =
            Visible: =locIsResultsLoadingVisible
            Width: |-
                =shpPageBackdropRS.Width
                - (10 * Switch(Value(lblScreenWidthSizingRBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
                - (25 * Switch(Value(lblScreenWidthSizingRBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
            X: =shpPageBackdropRS.X + shpPageBackdropRS.Width/2 - Self.Width/2
            Y: =lblFilterSeatArrangement.Y
            ZIndex: =18

        imgLoadingResults As image:
            DisplayMode: =DisplayMode.View
            Height: =Self.Width
            Image: =loading_spinner
            Visible: =locIsResultsLoadingVisible
            Width: =Min(crdLoadingPageRS.Width/2, crdLoadingPageRS.Height/3)
            X: =crdLoadingPageRS.X + crdLoadingPageRS.Width/2 - Self.Width/2
            Y: |
                =crdLoadingPageRS.Y + crdLoadingPageRS.Height/2 - Self.Height/2
            ZIndex: =19

