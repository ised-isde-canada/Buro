App As appinfo:
    BackEnabled: =false
    ConfirmExit: =true
    ConfirmExitMessage: ="Are you sure you'd like to close this application"
    MinScreenHeight: =App.DesignHeight/2
    MinScreenWidth: =App.DesignWidth/2
    OnStart: |-
        =Concurrent(
            // Custom themeing colors
            ClearCollect(
                Colors,
                { Color: "Primary", Hex: "#040054", RGB: RGBA(48, 36, 80, 1) },
                { Color: "Muted Primary", Hex: "#827b96", RGB: RGBA(130, 123, 150, 1) },
                { Color: "Focus Primary", Hex: "#c455ff", RGB: RGBA(196, 85, 255, 1) },
                { Color: "Danger", Hex: "#d3080c", RGB: RGBA(211, 8, 12, 1) },
                { Color: "Grey", Hex: "#626262", RGB: RGBA(98, 98, 98, 1) },
                { Color: "Light Grey", Hex: "#E8E8E8", RGB: RGBA(161, 161, 161, 1) },
                { Color: "Background", Hex: "#F6F8FF", RGB: RGBA(246, 248, 255, 1) },
                { Color: "Purple", Hex: "#C06FEB", RGB: RGBA(192, 111, 235, 1) },
                { Color: "Green", Hex: "#B8E986", RGB: RGBA(184, 233, 134, 1) },
                { Color: "Red", Hex: "#FF7373", RGB: RGBA(255, 115, 115, 1)},
                { Color: "Pink", Hex: "#d14a77", RGB: RGBA(209, 74, 119, 1) },
                { Color: "Dark Green", Hex: "#417505", RGB: RGBA(65, 117, 5, 1) },
                { Color: "Dark Red", Hex: "#d0021a", RGB: RGBA(208, 2, 27, 1) },
                { Color: "Dark Grey", Hex: "#757575", RGB: RGBA(117, 117, 117, 1) },
                { Color: "Error Primary", Hex: "#d0021a", RGB: RGBA(208, 2, 26, 1) },
                { Color: "Error Secondary", Hex: "#f2dfe7", RGB: RGBA(242, 223, 231, 1) },
                { Color: "Muted Primary Text", Hex: "#756D88", RGB: RGBA(117, 109, 136, 1)}
            ),
        
            // Language options within the app
            ClearCollect(LanguageOptions, { Language: "English", ShortHand: "en" }, { Language: "Français", ShortHand: "fr" }),
        
            //Set App Height Breakpoints for responsive application resizing
            Set(AppHeightBreakpoints, {Small: Value(App.DesignHeight * 0.75), Medium: Value(App.DesignHeight), Large: Value(App.DesignHeight * 1.25)}),
        
            Set(
                gblAppUserDetails,
                Office365Users.MyProfileV2()
            ),
        
            //Loading spinner base time
            Set(
                gblBaseLoadTime, 
                100000 //100 seconds
            ), 
        
            //Loading spinner delay
            Set(
                gblSpinnerLoadingDelay, 
                500 // 1/2 second
            ),
        
            Set(
                gblFeedbackDisplayDelay,
                5000 //5 seconds
            ); 
        
            //Setting maximum personal bookings per day
            Set(gblMaxBookingsPPPD, 1), //PPPD = Per Person Per Day
        
            //Setting the state of the on-start error tracker
            Set(gblIsAppStartUpErrorModalVisible, false),
        
            //Setting the default My Bookings Filter
            Set(gblMyBookingsFilter, "UPCOMING")
        );
        
        //Start splash screen timer
        Concurrent(
            Set(gblStartSplashScreenTimer, true),
            Set(gblSplashScreenTimerDuration, 100000000)
        );
        
        //Get and locally set the 'gblAppUserLang' for the user's preferred app language
        IfError(
            Set(gblAppUserLang,
                If(
                    LookUp(
                        Users,
                        user_email = Lower(gblAppUserDetails.mail),
                        language.Value
                    ) = "Français",
                    "fr",
                    "en"
                )
            ),
            //If there's an error show the component (error modal) on the splash screen
            Set(gblIsAppStartUpErrorModalVisible, true);
        
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Users)).Error,
                    error_message: First(Errors(Users)).Message, 
                    error_log: "LookUp( Users, user_email = Lower(gblAppUserDetails.mail), language.Value )",
                    error_origin: "App OnStart" 
                }
            ),
            {}
        );
        
        //Get and locally set the 'ALL DAY' timeslot's ID
        IfError(
            Set(gblAllDayTimeslotID, LookUp(Timeslots, start_time_in_min = 360 && end_time_in_min = 1080, ID)),
        
            //If there's an error show the component (error modal) on the splash screen
            Set(gblIsAppStartUpErrorModalVisible, true);
        
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Timeslots)).Error,
                    error_message: First(Errors(Timeslots)).Message, 
                    error_log: "LookUp(Timeslots, start_time_in_min = 360 && end_time_in_min = 1080, ID)",
                    error_origin: "App OnStart" 
                }
            ),
            {}
        );
        
        //Store static Sharepoint Lists locally - prevent querying the table however # times there are results in the gallery
        IfError(
            Concurrent(
                ClearCollect(colSeatingTypeTable, SeatingTypes),
                ClearCollect(colSeatingArrangementTable, SeatingArrangements),
                ClearCollect(colTranslationTable, Translations),
                ClearCollect(colTimeslots, Timeslots)
            ),
        
            //If there's an error show the component (error modal) on the splash screen
            Set(gblIsAppStartUpErrorModalVisible, true);
        
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: If(IsEmpty(Errors(SeatingTypes)), If(IsEmpty(Errors(SeatingArrangements)), If(IsEmpty(Errors(Translations)), First(Errors(Timeslots)).Error, First(Errors(Translations)).Error), First(Errors(SeatingArrangements)).Error), First(Errors(SeatingTypes)).Error),
                    error_message: If(IsEmpty(Errors(SeatingTypes)), If(IsEmpty(Errors(SeatingArrangements)), If(IsEmpty(Errors(Translations)), First(Errors(Timeslots)).Message, First(Errors(Translations)).Message), First(Errors(SeatingArrangements)).Message), First(Errors(SeatingTypes)).Message), 
                    error_log: "Concurrent(ClearCollect(colSeatingTypeTable, SeatingTypes)) ...", 
                    error_origin: "App OnStart" 
                }
            ),
            {}
        );
        
        //Load Splash Screen Assets
        IfError(
            Concurrent(
                //If it's the user's first time using the app they will see the welcome card
                //If user exists in the Users table the welcome card isn't displayed
                Set(gblIsFirstTimeLoad, IsBlank(LookUp(Users, user_email = Lower(gblAppUserDetails.mail)))),
                
                //Retrieve the splash screen app text from Sharepoint
                Set(gblAppHint, LookUp( colTranslationTable, key = "splashscreen.card.hint" && language.Value = Switch(IsBlank(gblAppUserLang), true, First(LanguageOptions).ShortHand, gblAppUserLang), text))
            ),
            //If there's an error show the component (error modal)
            Set(gblIsAppStartUpErrorModalVisible, true);
        
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Users)).Error,
                    error_message: First(Errors(Users)).Message, 
                    error_log: "LookUp(Users, user_email = Lower(gblAppUserDetails.mail)))",
                    error_origin: "App OnStart" 
                }
            ),
            false
        );
        
        //  -- SEARCH PAGE -- 
        //Load Region Table to speed up Search Page
        IfError(
            //1. Retreive ID Column 
            //2. Conditionally Retrieve Building Columns Based on Language
            //3. Insert Placeholder "Select Your ..." into 2.
            ClearCollect(
                colSearch_AllRegions,
                Regions
            ),
        
            //If there's an error show the component (error modal) on the splash screen
            Set(gblIsAppStartUpErrorModalVisible, true);
        
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Regions)).Error,
                    error_message: First(Errors(Regions)).Message,
                    error_log: "ClearCollect(colSearch_Regions, ...)", 
                    error_origin: "App OnStart" 
                }
            ),
            {}
        );
        
        //Store the Seating Arrangement Filter State
        ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));
        
        //  -- MY BOOKINGS PAGE -- 
        //Get My Bookings
        
        IfError(
            //Get all of my bookings within past 30 days and next 7 days (acc. to the default state of colMyBookingsFilter)
            ClearCollect(
                colMyBookings_Results,
                    AddColumns(
                        AddColumns(
                            Filter(Reservations, ID = -1),
                            "desk_id_value",
                            Value(desk_id.Value),
                            "booking_for",
                            If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),
                                //If there's a non-blank user_email and a non-blank proxy_user_email the booking is for the user_email   
                                LookUp(Office365Users.SearchUserV2({searchTerm: ThisRecord.user_email}).value, Lower(Mail) = Lower(user_email)),
                                Blank()
                            ),
                            "booking_by",
                            If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),
                                //If there's a non-blank user_email and a non-blank proxy_user_email the booking is by the proxy_user_email   
                                LookUp(Office365Users.SearchUserV2({searchTerm: ThisRecord.proxy_user_email}).value, Lower(Mail) = Lower(proxy_user_email)),
                                
                                If(!IsBlank(ThisRecord.user_email) && IsBlank(ThisRecord.proxy_user_email),
                                    //If there's a non-blank user_email and a blank proxy_user_email the booking is by the user_email
                                    LookUp(Office365Users.SearchUserV2({searchTerm: ThisRecord.user_email}).value, Lower(Mail) = Lower(user_email)),
                                    Blank()
                                )
                            )
                        ),
                    "booking_for_by_result",
                    If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),
                        If(ThisRecord.user_email = Lower(gblAppUserDetails.mail),
                            //Booking is for active user and was booked by someone else
                            ThisRecord.booking_by.GivenName & " " & ThisRecord.booking_by.Surname & " (" & Lower(ThisRecord.booking_by.Mail) & ")",
                            
                            If(ThisRecord.proxy_user_email = Lower(gblAppUserDetails.mail),
                                //Booking is for someone else, booked by active user
                                ThisRecord.booking_for.GivenName & " " & ThisRecord.booking_for.Surname & " (" & Lower(ThisRecord.booking_for.Mail) & ")",
                                ""
                            )
                        )
                    ),
                    "booking_for_by_en",
                    If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),
                            If(ThisRecord.user_email = Lower(gblAppUserDetails.mail),
                                //Booking is for active user and was booked by someone else
                                LookUp(colTranslationTable, key = "reviewbooking.bookedby" && language.Value = "en", text),
                                
                                If(ThisRecord.proxy_user_email = Lower(gblAppUserDetails.mail),
                                    //Booking is for someone else, booked by active user
                                    LookUp(colTranslationTable, key = "reviewbooking.bookingfor" && language.Value = "en", text)
                                )
                            )
        
                    ),
                    "booking_for_by_fr",
                    If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),
                            If(ThisRecord.user_email = Lower(gblAppUserDetails.mail),
                                //Booking is for active user and was booked by someone else
                                LookUp(colTranslationTable, key = "reviewbooking.bookedby" && language.Value = "fr", text),
                                
                                If(ThisRecord.proxy_user_email = Lower(gblAppUserDetails.mail),
                                    //Booking is for someone else, booked by active user
                                    LookUp(colTranslationTable, key = "reviewbooking.bookingfor" && language.Value = "fr", text)
                                )
                            )
        
                    )
                )
            ),
        
            //If there's an error show the component (error modal) on the splash screen
            Set(gblIsAppStartUpErrorModalVisible, true);
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
            {   user_email: Lower(gblAppUserDetails.mail), 
                error_code: First(Errors(Reservations)).Error,
                error_message: First(Errors(Reservations)).Message, 
                error_log: "Filter(Reservations...)",
                error_origin: "App OnStart" 
            }),
            {}
        );
    SizeBreakpoints: |-
        =//[1200, 1800, 2400]
        [640, 900, 1200]
    StartScreen: |-
        =//Used for Test Studio users
        IfError(
            If(LookUp(Users, user_email = Lower(Office365Users.MyProfileV2().mail), tester),
                'Test Screen-NotVisible'
            ),
            'Splash Screen'
        )

