"'Confirm Booking Screen' As screen.'phoneLayout_Success_ver3.0'":
    Fill: =RGBA(0,0,0,0)
    OnHidden: |-
        =UpdateContext({locIsFeedbackDisplayed: false, locResetScrollPosition: false});
    OnVisible: |+
        =//Call Loading animation and set default var values
        UpdateContext(
            {
                locIsLoadingVisible: false,
                locIsPageLoadingVisible: true,
                locIsDoneLoadingVisible: false,
                locStartLoadingTimer: false,
                locStartDoneTimer: false,
                locStartFeedbackTimer: false,
                locLoadingDuration: gblBaseLoadTime,
                locIsErrorModalVisible: false,
                locIsFeedbackDisplayed: false,
                locResetScrollPosition: true
            }
        );
        
        UpdateContext({locStartLoadingTimer:true});
        
        //Get the user's reservation count to determine if the feedback should be displayed
        IfError(
            /* Get the updated number of reservations made by the active user and on every 10 bookings
               show the feedback after 5 seconds (https://jira.ic.gc.ca/browse/CMSCORS-235) */
            ClearCollect(colConfirmBooking_Feedback, 
            { ID: 1, ReservationCount: LookUp(Users, user_email = Lower(gblAppUserDetails.mail), reservations_made_count), ShouldPromptFeedback: false }
            );
            Patch(colConfirmBooking_Feedback, First(colConfirmBooking_Feedback), { ShouldPromptFeedback: Mod(First(colConfirmBooking_Feedback).ReservationCount - 1, 10) = 0 } ),
            
            //If there's an error show the component (error modal)
            UpdateContext({locIsErrorModalVisible: true});
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
            {   user_email: Lower(gblAppUserDetails.mail), 
                error_code: First(Errors(Users)).Error,
                error_message: First(Errors(Users)).Message, 
                error_log: "LookUp(Users, user_email = Lower(gblAppUserDetails.mail)))})",
                error_origin: App.ActiveScreen 
            }),
            {}
        );
        
        UpdateContext({locBookingForAnotherPerson: If(!IsBlank(First(colConfirmBooking_Result).user_email) && !IsBlank(First(colConfirmBooking_Result).proxy_user_email), true, false)});
        
        //Refresh the datasource
        
        IfError(
            Refresh(Reservations),
        
            //If there's an error show the component (error modal)
            UpdateContext({locIsErrorModalVisible: true});
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
            {   user_email: Lower(gblAppUserDetails.mail), 
                error_code: First(Errors(Reservations)).Error,
                error_message: First(Errors(Reservations)).Message, 
                error_log: "Refresh(Reservations)",
                error_origin: App.ActiveScreen 
            }),
            false
        );
        
        //Using the new booking add it to the collection for My Bookings Results if the new booking isn't empty and if the booking isn't already in the My Booking Results collection
        If(!IsEmpty(colConfirmBooking_Result) && Not(First(colConfirmBooking_Result).ID in colMyBookings_Results.ID),
            ForAll(colConfirmBooking_Result As new_booking,
                    Collect(colMyBookings_Results, 
                        new_booking
                    );
                    With(
                        Patch(colMyBookings_Results, LookUp(colMyBookings_Results, ID = new_booking.ID),
                            { 
                                desk_id_value: Value(new_booking.desk_id.Value),
                                booking_for: If(!IsBlank(new_booking.user_email) && !IsBlank(new_booking.proxy_user_email),
                                                //If there's a non-blank user_email and a non-blank proxy_user_email the booking is for the user_email 
                                                LookUp(Office365Users.SearchUserV2({searchTerm: new_booking.user_email}).value, Lower(ThisRecord.Mail) =                                                                   Lower(new_booking.user_email)),
                                                Blank()
                                                ),
                                booking_by: If(!IsBlank(new_booking.user_email) && !IsBlank(new_booking.proxy_user_email),
                                                //If there's a non-blank user_email and a non-blank proxy_user_email the booking is by the proxy_user_email   
                                                LookUp(Office365Users.SearchUserV2({searchTerm: new_booking.proxy_user_email}).value, Lower(ThisRecord.Mail) =                                                             Lower(new_booking.proxy_user_email)),
                                                
                                                If(!IsBlank(new_booking.user_email) && IsBlank(new_booking.proxy_user_email),
                                                    //If there's a non-blank user_email and a blank proxy_user_email the booking is by the user_email
                                                    LookUp(Office365Users.SearchUserV2({searchTerm: new_booking.user_email}).value, Lower(ThisRecord.Mail) =                                                                   Lower(new_booking.user_email)),
                                                    Blank()
                                                )
                                            )
                            }
                        ),
        
                        Patch(colMyBookings_Results, LookUp(colMyBookings_Results, ID = new_booking.ID),
                            {
                                booking_for_by_result:
                                    If(!IsBlank(new_booking.user_email) && !IsBlank(new_booking.proxy_user_email),
                                        If(new_booking.user_email = Lower(gblAppUserDetails.mail),
                                            //Booking is for active user and was booked by someone else
                                            ThisRecord.booking_by.GivenName & " " & ThisRecord.booking_by.Surname & " (" & Lower(ThisRecord.booking_by.Mail) & ")",
                                            
                                            If(new_booking.proxy_user_email = Lower(gblAppUserDetails.mail),
                                                //Booking is for someone else, booked by active user
                                                ThisRecord.booking_for.GivenName & " " & ThisRecord.booking_for.Surname & " (" & Lower(ThisRecord.booking_for.Mail) & ")",
                                                ""
                                            )
                                        )
                                    ),
                                booking_for_by_en:
                                    If(!IsBlank(new_booking.user_email) && !IsBlank(new_booking.proxy_user_email),
                                        If(new_booking.user_email = Lower(gblAppUserDetails.mail),
                                            //Booking is for active user and was booked by someone else
                                            LookUp(colTranslationTable, key = "reviewbooking.bookedby" && language.Value = "en", text),
                                            
                                            If(new_booking.proxy_user_email = Lower(gblAppUserDetails.mail),
                                                //Booking is for someone else, booked by active user
                                                LookUp(colTranslationTable, key = "reviewbooking.bookingfor" && language.Value = "en", text)
                                            )
                                        )
        
                                    ),
                                booking_for_by_fr:
                                If(!IsBlank(new_booking.user_email) && !IsBlank(new_booking.proxy_user_email),
                                    If(new_booking.user_email = Lower(gblAppUserDetails.mail),
                                        //Booking is for active user and was booked by someone else
                                        LookUp(colTranslationTable, key = "reviewbooking.bookedby" && language.Value = "fr", text),
                                        
                                        If(new_booking.proxy_user_email = Lower(gblAppUserDetails.mail),
                                            //Booking is for someone else, booked by active user
                                            LookUp(colTranslationTable, key = "reviewbooking.bookingfor" && language.Value = "fr", text)
                                        )
                                    )
        
                                )
                            }
                        )
                    )
            )
        );
        
        
        //------------------------------------------------------------------------------------------------------------------------------------------------------------
        
        //Empty out the fresh data
        Concurrent(
            Clear(colMyBookings_DesksRaw),
            Clear(colMyBookings_BuildingsRaw),
            Clear(colMyBookings_NeighbourhoodsRaw),
            Clear(colMyBookings_FloorsRaw)
        );
        
        IfError(
            //Also check if there are any new Buildings, Neigbourhoods, Floors, Desks that we need to add to our local collections
            Collect(colMyBookings_DesksRaw, 
                If(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID, Not(desk_id_value in colMyBookings_Desks.ID)), 
                    LookUp(AddColumns(AddColumns(Desks, "building_id_value", building_id.Id),"neighbourhood_id_value", neighbourhood_id.Id), ID = First(colConfirmBooking_Result).desk_id.Id)
                    )
            ),
            //If there's an error show the component (error modal)
            UpdateContext({locIsErrorModalVisible: true});
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
            {   user_email: Lower(gblAppUserDetails.mail), 
                error_code: First(Errors(Desks)).Error,
                error_message: First(Errors(Desks)).Message, 
                error_log: "LookUp(AddColumns(AddColumns(Desks, ... )))",
                error_origin: App.ActiveScreen 
            }),
            Table()
        );
        
        If(!IsEmpty(colMyBookings_DesksRaw),
            IfError(
                ForAll(Filter(colMyBookings_DesksRaw, Not(building_id_value in colMyBookings_Buildings.ID)) As building_to_find, 
                    Collect(colMyBookings_BuildingsRaw, LookUp(Buildings, ID = building_to_find.building_id_value))
                ),
                //If there's an error show the component (error modal)
                UpdateContext({locIsErrorModalVisible: true});
                
                //If there's an error also try to patch the error details to the Sharepoint Error list
                Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Buildings)).Error,
                    error_message: First(Errors(Buildings)).Message, 
                    error_log: "LookUp(Buildings, ID = building_to_find.building_id_value)",
                    error_origin: App.ActiveScreen 
                }),
                Table()
            );
            IfError(
                ForAll(Filter(Distinct(colMyBookings_DesksRaw, neighbourhood_id_value), Not(Result in colMyBookings_Neighbourhoods.ID)) As neighbourhood_to_find, 
                    Collect(colMyBookings_NeighbourhoodsRaw, LookUp(AddColumns(Neighbourhoods, "floor_id_value", floor_id.Id), ID = neighbourhood_to_find.Result))
                ),
                //If there's an error show the component (error modal)
                UpdateContext({locIsErrorModalVisible: true});
                
                //If there's an error also try to patch the error details to the Sharepoint Error list
                Patch(ExternalErrors, Defaults(ExternalErrors), 
                {   user_email: Lower(gblAppUserDetails.mail), 
                    error_code: First(Errors(Neighbourhoods)).Error,
                    error_message: First(Errors(Neighbourhoods)).Message, 
                    error_log: "LookUp(AddColumns(Neighbourhoods, 'floor_id_value', floor_id.Id) ...)",
                    error_origin: App.ActiveScreen 
                }),
                Table()
            )
        
        );
        IfError(
            If(!IsEmpty(colMyBookings_NeighbourhoodsRaw),
                ForAll(Filter(Distinct(colMyBookings_NeighbourhoodsRaw, floor_id_value), Not(Result in colMyBookings_Floors.ID)) As floor_to_find, 
                    Collect(colMyBookings_FloorsRaw, LookUp(Floors, ID = floor_to_find.Result))
                )
            ),
            //If there's an error show the component (error modal)
            UpdateContext({locIsErrorModalVisible: true});
            
            //If there's an error also try to patch the error details to the Sharepoint Error list
            Patch(ExternalErrors, Defaults(ExternalErrors), 
            {   user_email: Lower(gblAppUserDetails.mail), 
                error_code: First(Errors(Floors)).Error,
                error_message: First(Errors(Floors)).Message, 
                error_log: "LookUp(Floors, ID = floor_to_find.Result)",
                error_origin: App.ActiveScreen 
            }),
            false
        );
        
        //Add the non already existent desks, buildings, neighbourhoods, and floors to our existing respective MyBooking tables
        Concurrent(
            ForAll(colMyBookings_DesksRaw As desk_to_add, 
                Collect(colMyBookings_Desks, desk_to_add)
            ),
            ForAll(colMyBookings_BuildingsRaw As building_to_add, 
                Collect(colMyBookings_Buildings, building_to_add)
            ),
            ForAll(colMyBookings_NeighbourhoodsRaw As neighbourhoods_to_add, 
                Collect(colMyBookings_Neighbourhoods, neighbourhoods_to_add)
            ),
            ForAll(colMyBookings_FloorsRaw As floors_to_add, 
                Collect(colMyBookings_Floors, floors_to_add)
            )
        );
        
        //Empty out the fresh data
        Concurrent(
            Clear(colMyBookings_DesksRaw),
            Clear(colMyBookings_BuildingsRaw),
            Clear(colMyBookings_NeighbourhoodsRaw),
            Clear(colMyBookings_FloorsRaw),
            Clear(colMyBookings_RawResults),
            Set(gblMyBookingsFilter, "UPCOMING");
        );
        
        //Stop the timer
        UpdateContext({locLoadingDuration: 0});
        

    shpScreenBackdropCBS As rectangle:
        BorderColor: =RGBA(255, 255, 255, 1)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Fill: =RGBA(224, 224, 224,1)
        Height: =Parent.Height
        Width: =Parent.Width
        ZIndex: =1

    shpPageBackdropCBS As rectangle:
        BorderColor: =RGBA(204, 204, 204, 1)
        BorderThickness: =2
        Fill: =LookUp(Colors, Color = "Background", RGB)
        FocusedBorderThickness: =4
        Height: =Parent.Height
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width, App.DesignWidth * 2)
        X: =(Parent.Width-Self.Width) /2
        ZIndex: =2

    timLoadingCBS As timer:
        AutoPause: =false
        Duration: =locLoadingDuration
        Height: =125
        OnTimerEnd: |-
            =UpdateContext({locIsLoadingVisible: false, locStartLoadingTimer:false});
            UpdateContext({ locStartDoneTimer:true});
            If(First(colConfirmBooking_Feedback).ShouldPromptFeedback, UpdateContext({ locStartFeedbackTimer:true}));
        OnTimerStart: |-
            =UpdateContext({locIsLoadingVisible: true});
        Reset: =true
        Start: =locStartLoadingTimer
        TabIndex: =-1
        Text: =""
        Visible: =false
        Width: =32
        X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width
        Y: =shpPageBackdropCBS.Y + shpPageBackdropCBS.Height
        ZIndex: =5

    timDoneLoadingCBS As timer:
        Duration: =2000
        Height: =125
        OnTimerEnd: |-
            =UpdateContext({locIsDoneLoadingVisible:false, locStartDoneTimer:false});
        OnTimerStart: |-
            =UpdateContext({locIsDoneLoadingVisible: true, locIsPageLoadingVisible: false});
        Reset: =true
        Start: =locStartDoneTimer
        TabIndex: =-1
        Text: =""
        Visible: =false
        Width: =32
        X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width
        Y: =shpPageBackdropCBS.Y + shpPageBackdropCBS.Height
        ZIndex: =6

    timShowFeedbackCBS As timer:
        Duration: =gblFeedbackDisplayDelay
        Height: =125
        OnTimerEnd: |-
            =UpdateContext(
                {
                    locIsFeedbackDisplayed: true,
                    locStartFeedbackTimer: false
                }
            );
        OnTimerStart: =
        Reset: =true
        Start: =locStartFeedbackTimer
        TabIndex: =-1
        Text: =""
        Visible: =false
        Width: =32
        X: =608
        Y: =1011
        ZIndex: =8

    canScrollableCanvasCBS As fluidGrid.fluidGridWithBlankCard:
        BorderThickness: =0
        Height: =App.Height - cmpHeaderCBS.Height - cmpNavCBS.Height
        Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, true, false), false)
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: =cmpHeaderCBS.Y + cmpHeaderCBS.Height
        ZIndex: =9

        canCanvasCardCBS As dataCard:
            BorderColor: =RGBA(0, 0, 0, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =0
            DisplayMode: =DisplayMode.Edit
            Fill: =LookUp(Colors, Color = "Background", RGB)
            Height: |-
                =Max(
                    canScrollableCanvasCBS.Height, 
                
                    Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.5, 
                            ScreenSize.Large, 1.75,
                            2),
                        25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.5, 
                            ScreenSize.Large, 1.75,
                            2)
                    ) + btnConfirmCardCBS.Height + 
                    Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.5, 
                            ScreenSize.Large, 1.75,
                            2),
                        25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.5, 
                            ScreenSize.Large, 1.75,
                            2)
                    ) +
                    btnMyBookingsCBS.Height + 
                    Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.5, 
                            ScreenSize.Large, 1.75,
                            2),
                        25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                            ScreenSize.Small, 1,  
                            ScreenSize.Medium, 1.5, 
                            ScreenSize.Large, 1.75,
                            2)
                    )
                )
            Visible: =locResetScrollPosition
            Width: =Parent.Width
            X: =0
            Y: =0
            ZIndex: =1

            grpModalContentCBS As group:
                Height: =5
                Width: =5
                X: =40
                Y: =40
                ZIndex: =11

                btnMyBookingsCBS As button:
                    BorderColor: =Color.White
                    BorderThickness: |-
                        =Min(2 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 1,
                                    ScreenSize.Medium, 1.25,
                                    ScreenSize.Large, 1.5,
                                    1.75),
                            2 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 1,
                                    ScreenSize.Medium, 1.25,
                                    ScreenSize.Large, 1.5,
                                    1.75)
                        )
                    DisabledColor: =LookUp(Colors, Color = "Background", RGB)
                    DisabledFill: =LookUp(Colors, Color = "Grey", RGB)
                    Fill: =LookUp(Colors, Color = "Primary", RGB)
                    FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
                    FocusedBorderThickness: |-
                        =Min(2.5 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 1,
                                    ScreenSize.Medium, 1.25,
                                    ScreenSize.Large, 1.5,
                                    1.75),
                            2.5 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 1,
                                    ScreenSize.Medium, 1.25,
                                    ScreenSize.Large, 1.5,
                                    1.75)
                        )
                    Font: =Font.'Lato Black'
                    Height: |-
                        =Min(100 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 0.75,  
                                ScreenSize.Medium, 0.9,  
                                ScreenSize.Large, 1.125,
                                1.25),
                            100 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 0.75,  
                                ScreenSize.Medium, 0.9,  
                                ScreenSize.Large, 1.125,
                                1.25) 
                        )
                    HoverBorderColor: =RGBA(0,0,0,0)
                    HoverColor: =btnMyBookingsCBS.Color
                    HoverFill: =LookUp(Colors, Color = "Muted Primary", RGB)
                    OnSelect: =Navigate('My Bookings Screen', Cover)
                    PressedBorderColor: =RGBA(0,0,0,0)
                    PressedFill: =Color.White
                    RadiusBottomLeft: =Self.RadiusTopLeft
                    RadiusBottomRight: =Self.RadiusTopLeft
                    RadiusTopLeft: |-
                        =Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                2),
                            15 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                2)
                        )
                    RadiusTopRight: =Self.RadiusTopLeft
                    Size: |-
                        =Min(18 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.55,  
                                1.9),
                            18 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.55,  
                                1.9) 
                        )
                    TabIndex: =If(!locIsFeedbackDisplayed, 0, -1)
                    Text: =LookUp(colTranslationTable, key = "nav.bookings" && language.Value = gblAppUserLang, text)
                    Tooltip: =
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, true, false), false)
                    Width: =btnConfirmCardCBS.Width
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =btnConfirmCardCBS.Y + btnConfirmCardCBS.Height + 
                        Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.5, 
                                ScreenSize.Large, 1.75,
                                2),
                            25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.5, 
                                ScreenSize.Large, 1.75,
                                2)
                        )
                    ZIndex: =2

                btnConfirmCardCBS As button:
                    BorderThickness: =0
                    Color: =Color.White
                    DisabledColor: =Self.Color
                    DisabledFill: =Self.Fill
                    DisplayMode: =DisplayMode.Disabled
                    Fill: =Color.White
                    Height: |-
                        =Min(35 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            35 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        ) +
                        lblSuccessMessage.Height +
                        Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            25 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        ) +
                        imgSuccessCheckmark.Height +
                        Min(35 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            35 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        ) +
                        lblBookingDetailsCBS.Height +
                        
                            If(locBookingForAnotherPerson,
                                Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                        ScreenSize.Small, 0.75,
                                        ScreenSize.Medium, 1,
                                        ScreenSize.Large, 1.5,
                                        2),
                                    15 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                        ScreenSize.Small, 0.75,
                                        ScreenSize.Medium, 1,
                                        ScreenSize.Large, 1.5,
                                        2)
                                ) +
                                lblBookingForSubtitleCBS.Height +
                                Min(3 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                                ScreenSize.Small, 0.75,
                                                ScreenSize.Medium, 1,
                                                ScreenSize.Large, 1.5,
                                                2),
                                    3 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                            ScreenSize.Small, 0.75,
                                            ScreenSize.Medium, 1,
                                            ScreenSize.Large, 1.5,
                                            2)
                                ) +
                                lblBookingForNameCBS.Height +
                                Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                            ScreenSize.Small, 0.75,
                                            ScreenSize.Medium, 1,
                                            ScreenSize.Large, 1.5,
                                            2),
                                    15 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                            ScreenSize.Small, 0.75,
                                            ScreenSize.Medium, 1,
                                            ScreenSize.Large, 1.5,
                                            2)
                                ) +
                                lblBookedBySubtitleCBS.Height +
                                Min(3 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                            ScreenSize.Small, 0.75,
                                            ScreenSize.Medium, 1,
                                            ScreenSize.Large, 1.5,
                                            2),
                                    3 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                            ScreenSize.Small, 0.75,
                                            ScreenSize.Medium, 1,
                                            ScreenSize.Large, 1.5,
                                            2)
                                ) +
                                lblBookedByNameCBS.Height
                            ) +
                        Min(35 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                ScreenSize.Small, 0.75,
                                ScreenSize.Medium, 1,
                                ScreenSize.Large, 1.5,
                                2),
                            35 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                ScreenSize.Small, 0.75,
                                ScreenSize.Medium, 1,
                                ScreenSize.Large, 1.5,
                                2)
                        ) 
                    HoverBorderColor: =Self.Fill
                    HoverColor: =Self.Fill
                    HoverFill: =Self.Fill
                    PressedFill: =Self.Fill
                    RadiusBottomLeft: =Self.RadiusTopLeft
                    RadiusBottomRight: =Self.RadiusTopLeft
                    RadiusTopLeft: |-
                        =Min(10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                2),
                            10 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                2)
                        )
                    RadiusTopRight: =Self.RadiusTopLeft
                    Size: =0
                    TabIndex: =-1
                    Text: =""
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, true, false), false)
                    Width: |-
                        =cmpHeaderCBS.Width
                        - (10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.5,  
                                ScreenSize.Large, 1.75,
                                5))
                        - (25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.5,  
                                ScreenSize.Large, 1.75,
                                5))
                    X: |-
                        =//shpPageBackdropCBS.X + shpPageBackdropCBS.Width/2 - Self.Width/2
                        Parent.Width/2 - Self.Width/2
                    Y: |-
                        =Max(
                            Min(25 * Switch(Value(lblScreenWidthSizingCYBS.Text),  
                                    ScreenSize.Small, 1,  
                                    ScreenSize.Medium, 1.5, 
                                    ScreenSize.Large, 1.75,
                                    2),
                                25 * Switch(cmpScreenFunctionsCYBS.ScreenSize,  
                                    ScreenSize.Small, 1,  
                                    ScreenSize.Medium, 1.5, 
                                    ScreenSize.Large, 1.75,
                                    2)
                            ),
                        
                            canCanvasCardCBS.Height/2 - 
                            (Self.Height + 
                            Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                    ScreenSize.Small, 1,  
                                    ScreenSize.Medium, 1.5, 
                                    ScreenSize.Large, 1.75,
                                    2),
                                25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                    ScreenSize.Small, 1,  
                                    ScreenSize.Medium, 1.5, 
                                    ScreenSize.Large, 1.75,
                                    2)
                            ) + btnMyBookingsCBS.Height + 
                            Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                    ScreenSize.Small, 1,  
                                    ScreenSize.Medium, 1.5, 
                                    ScreenSize.Large, 1.75,
                                    2),
                                25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                    ScreenSize.Small, 1,  
                                    ScreenSize.Medium, 1.5, 
                                    ScreenSize.Large, 1.75,
                                    2)
                            ))/2
                        )
                    ZIndex: =3

                lblBookedByNameCBS As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    Color: =LookUp(Colors, Color = "Primary", RGB)
                    Font: =Font.Lato
                    FontWeight: =FontWeight.Bold
                    Height: =70
                    PaddingBottom: =0
                    PaddingLeft: =0
                    PaddingRight: =0
                    PaddingTop: =0
                    Size: =lblBookingDetailsCBS.Size
                    Text: =gblAppUserDetails.givenName & " " & gblAppUserDetails.surname
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, If(locBookingForAnotherPerson, true, false), false), false)
                    Width: =lblSuccessMessage.Width
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =If(Self.Visible, 
                            lblBookedBySubtitleCBS.Y + lblBookedBySubtitleCBS.Height +
                            Min(3 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                        ScreenSize.Small, 0.75,
                                        ScreenSize.Medium, 1,
                                        ScreenSize.Large, 1.5,
                                        2),
                                3 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                        ScreenSize.Small, 0.75,
                                        ScreenSize.Medium, 1,
                                        ScreenSize.Large, 1.5,
                                        2)
                            ), 
                            lblBookedBySubtitleCBS.Y + 1
                        )
                    ZIndex: =4

                lblBookedBySubtitleCBS As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    Color: =LookUp(Colors, Color = "Grey", RGB)
                    Font: =Font.Lato
                    FontWeight: =FontWeight.Bold
                    Height: =70
                    PaddingBottom: =0
                    PaddingLeft: =0
                    PaddingRight: =0
                    PaddingTop: =0
                    Size: =lblBookingDetailsCBS.Size
                    Text: =LookUp(colTranslationTable, key = "reviewbooking.bookedby" && language.Value = gblAppUserLang, text)
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, If(locBookingForAnotherPerson, true, false), false), false)
                    Width: =lblSuccessMessage.Width
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =If(Self.Visible, lblBookingForNameCBS.Y + lblBookingForNameCBS.Height +
                        Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            15 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        ),
                        lblBookingForNameCBS.Y + 2)
                    ZIndex: =5

                lblBookingForNameCBS As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    Color: =LookUp(Colors, Color = "Primary", RGB)
                    Font: =Font.Lato
                    FontWeight: =FontWeight.Bold
                    Height: =70
                    PaddingBottom: =0
                    PaddingLeft: =0
                    PaddingRight: =0
                    PaddingTop: =0
                    Size: =lblBookingDetailsCBS.Size
                    Text: |-
                        =With(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID),
                            If(!IsBlank(ThisRecord.user_email) && !IsBlank(ThisRecord.proxy_user_email),
                                ThisRecord.booking_for.GivenName & " " & ThisRecord.booking_for.Surname & Char(13) & "(" & Lower(ThisRecord.booking_for.Mail) & ")"
                            )
                        )
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, If(locBookingForAnotherPerson, true, false), false), false)
                    Width: =lblSuccessMessage.Width
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =If(Self.Visible, 
                            lblBookingForSubtitleCBS.Y + lblBookingForSubtitleCBS.Height +
                            Min(3 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                        ScreenSize.Small, 0.75,
                                        ScreenSize.Medium, 1,
                                        ScreenSize.Large, 1.5,
                                        2),
                                3 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                        ScreenSize.Small, 0.75,
                                        ScreenSize.Medium, 1,
                                        ScreenSize.Large, 1.5,
                                        2)
                            ), 
                            lblBookingForSubtitleCBS.Y + 1
                        )
                    ZIndex: =6

                lblBookingForSubtitleCBS As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    Color: =LookUp(Colors, Color = "Grey", RGB)
                    Font: =Font.Lato
                    FontWeight: =FontWeight.Bold
                    Height: =70
                    PaddingBottom: =0
                    PaddingLeft: =0
                    PaddingRight: =0
                    PaddingTop: =0
                    Size: =lblBookingDetailsCBS.Size
                    Text: =LookUp(colTranslationTable, key = "reviewbooking.bookingfor" && language.Value = gblAppUserLang, text)
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, If(locBookingForAnotherPerson, true, false), false), false)
                    Width: =lblSuccessMessage.Width
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =lblBookingDetailsCBS.Y + lblBookingDetailsCBS.Height + 
                        Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            15 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        )
                    ZIndex: =7

                lblBookingDetailsCBS As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    Color: =LookUp(Colors, Color = "Primary", RGB)
                    Font: =Font.Lato
                    FontWeight: =FontWeight.Bold
                    Height: =
                    Live: =Live.Assertive
                    Size: |-
                        =Min(16 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                1.75),
                            16 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                1.75) 
                        )
                    Text: |-
                        =//Personal Booking Reads:
                        // Start Date
                        // Time Range
                        // Desk Name, Seating Type
                        // [CONDITIONAL] Workstation Specifics
                        // Floor Name, Building Address
                        // Building Address and Name
                        With(LookUp(colMyBookings_Results, ID = First(colConfirmBooking_Result).ID),
                            Proper(Switch(gblAppUserLang, "fr", 
                                Text(start_date, "[$-en-US]dddd d, mmmm, yyyy", "fr-FR"),
                                Text(start_date, "[$-en-US]dddd, mmmm d, yyyy", "en-CA")
                                )
                            ) & " 
                            " &
                            LookUp(colTimeslots, ID = timeslot_id.Id, Switch(gblAppUserLang, "fr", time_range_fr, time_range_en)) & "
                            " & 
                            LookUp(colMyBookings_Desks, ID = desk_id.Id, Switch(gblAppUserLang, "fr", desk_name_fr, desk_name_en)) & ", " & 
                            LookUp(colSeatingTypeTable, ID = LookUp(colMyBookings_Desks, ID = desk_id.Id, seating_type_id.Id), Switch(gblAppUserLang, "fr", seating_type_name_fr, seating_type_name_en)) & "
                            " &
                            With(LookUp(colMyBookings_Desks, ID = desk_id.Id) As booked_desk,
                                If(!IsEmpty(booked_desk.workstation_specifics),
                                    Concat(booked_desk.workstation_specifics As tag, Switch(gblAppUserLang, "fr", Last(Split(tag.Value, " | ")).Result, First(Split(tag.Value, " | ")).Result) & If(Last(booked_desk.workstation_specifics).Value <> tag.Value, ", ")) & "
                                "
                                )
                            ) &
                            LookUp(colMyBookings_Floors, ID = LookUp(colMyBookings_Neighbourhoods, ID = LookUp(colMyBookings_Desks, ID = desk_id.Id, neighbourhood_id_value), floor_id_value), Switch(gblAppUserLang, "fr", floor_name_fr, floor_name_en)) & ", " & 
                            LookUp(colMyBookings_Buildings, ID = LookUp(colMyBookings_Desks, ID = First(colConfirmBooking_Result).desk_id.Id, building_id_value), Switch(gblAppUserLang, "fr", building_add_fr & " 
                        " & building_name_fr, building_add_en & "
                        " & building_name_en))
                        )
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, true, false), false)
                    Width: =lblSuccessMessage.Width
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =(imgSuccessCheckmark.Y + imgSuccessCheckmark.Height) +
                        Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            25 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        )
                    ZIndex: =8

                imgSuccessCheckmark As image:
                    Height: =Self.Width
                    Image: =checkmark
                    PaddingBottom: =1
                    PaddingLeft: =1
                    PaddingRight: =1
                    PaddingTop: =1
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, true, false), false)
                    Width: |-
                        =Min(75 *  Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.15,
                                ScreenSize.Large, 1.55,  
                                2),
                           75 *  Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.15,
                                ScreenSize.Large, 1.55,  
                                2)     
                        )
                    X: =Parent.Width/2 - Self.Width/2
                    Y: |-
                        =lblSuccessMessage.Y + lblSuccessMessage.Height +
                        Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            25 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        )
                    ZIndex: =9

                lblSuccessMessage As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    Color: =LookUp(Colors, Color = "Primary", RGB)
                    Font: =Font.'Lato Black'
                    FontWeight: =FontWeight.Semibold
                    Height: =0
                    Size: |-
                        =Min(20 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                1.75),
                            20 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                                ScreenSize.Small, 1,  
                                ScreenSize.Medium, 1.25,
                                ScreenSize.Large, 1.5,  
                                1.75) 
                        )
                    Text: =LookUp(colTranslationTable, key = "bookingconfirmation.confirmation.text" && language.Value = gblAppUserLang, text)
                    Visible: =If(!locIsPageLoadingVisible, If(!locIsFeedbackDisplayed, true, false), false)
                    Width: =shpPageBackdropCBS.Width * 0.8
                    X: =btnConfirmCardCBS.X + btnConfirmCardCBS.Width/2 - Self.Width/2
                    Y: |-
                        =btnConfirmCardCBS.Y +
                        Min(35 * Switch(Value(lblScreenWidthSizingCBS.Text),
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2),
                            35 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                                    ScreenSize.Small, 0.75,
                                    ScreenSize.Medium, 1,
                                    ScreenSize.Large, 1.5,
                                    2)
                        )
                    ZIndex: =10

    lblConfirmationHeadingCBS As label:
        AutoHeight: =true
        Height: =0
        Role: =TextRole.Heading2
        Size: =0
        Text: =If(locIsFeedbackDisplayed, LookUp(colTranslationTable, key = "bookingconfirmation.feedbacksection" && language.Value = gblAppUserLang, text), LookUp(colTranslationTable, key = "bookingconfirmation.detailssection" && language.Value = gblAppUserLang, text))
        Width: =0
        X: =shpPageBackdropCBS.X
        Y: =cmpHeaderCBS.Y + cmpHeaderCBS.Height
        ZIndex: =19

    cmpLoadingAnimationCBS As cmp_LoadingAnimation:
        Height: =cmpHeaderCBS.Height
        IsTextVisible: =locIsLoadingVisible
        LoadingText: =LookUp(colTranslationTable, key = "loading.text" && language.Value = gblAppUserLang, text)
        PrimaryColor: =LookUp(Colors, Color = "Muted Primary", RGB)
        X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width
        Y: =cmpHeaderCBS.Y + cmpHeaderCBS.Height/2 - Self.Height/2
        ZIndex: =20

    cmpDoneAnimationCBS As cmp_LoadingDoneAnimation:
        DoneLoadingText: =LookUp(colTranslationTable, key = "loadingdone.text" && language.Value = gblAppUserLang, text)
        Height: =cmpHeaderCBS.Height
        IsTextVisible: =locIsDoneLoadingVisible
        Visible: =true
        X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width
        Y: =cmpHeaderCBS.Y + cmpHeaderCBS.Height/2 - Self.Height/2
        ZIndex: =21

    cmpNavCBS As cmp_MainNav:
        FocusedColor: =LookUp(Colors, Color = "Focus Primary", RGB)
        FontSize: |-
            =Min(10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                10 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        Height: |-
            =Min(86 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                    ScreenSize.Small, 1.25,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                86 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                    ScreenSize.Small, 1.25,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        MutedColor: =LookUp(Colors, Color = "Grey", RGB)
        NavigateToText: =LookUp(colTranslationTable, key = "nav.navigate" && language.Value = gblAppUserLang, text)
        NavItems: |-
            =Table(
                {
                    Key: "profile",
                    Label: gblAppUserDetails.givenName,
                    NavigationLink: 'My Profile Screen'
                },
                {
                    Key: "newBooking",
                    Label: LookUp(colTranslationTable, key = "nav.book" && language.Value = gblAppUserLang, text),
                    NavigationLink: 'Search Screen'
                },
                {
                    Key: "bookings",
                    Label: LookUp(colTranslationTable, key = "nav.bookings" && language.Value = gblAppUserLang, text),
                    NavigationLink: 'My Bookings Screen'
                }
            )
        PrimaryColor: =LookUp(Colors, Color = "Primary", RGB)
        ScreenSize_Height: =cmpScreenFunctionsCBS.ScreenSize
        ScreenSize_Width: =Value(lblScreenWidthSizingCBS.Text)
        SelectedItem: ="newBooking"
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: =App.Height-cmpNavCBS.Height
        ZIndex: =22

    cmpHeaderCBS As cmp_PageHeading:
        BackText: =LookUp(colTranslationTable, key = "header.back" && language.Value = gblAppUserLang, text)
        FontSize: |-
            =Min(22 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                22 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        HasBackBtn: =false
        HeadingText: =LookUp(colTranslationTable, key = "header.bookingconfirmation" && language.Value = gblAppUserLang, text)
        Height: |-
            =Min(78 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    1.75),
                78 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    1.75)
            )
        PositionOffset: |-
            =//Recreates the card offset using non-dependent properties
            (Parent.Width/2 -
            (If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
            - (10 * Switch(Parent.Size,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5))
            - (25 * Switch(Parent.Size,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5)))/2)
            - shpPageBackdropCBS.X
        PrimaryColor: =LookUp(Colors, Color = "Primary", RGB)
        ScreenSize_Height: =cmpScreenFunctionsCBS.ScreenSize
        ScreenSize_Width: =Value(lblScreenWidthSizingCBS.Text)
        SecondaryColor: =LookUp(Colors, Color = "Background", RGB)
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: |-
            =If(
            Parent.Size=ScreenSize.Small,
            2,
            4
            )
        ZIndex: =23

    grpScreenSizingCBS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =23

        lblScreenWidthSizingCBS As label:
            Height: =0
            Size: =21
            Text: =Parent.Size
            Visible: =false
            Width: =0
            X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width
            Y: =shpPageBackdropCBS.Y + shpPageBackdropCBS.Height
            ZIndex: =3

        cmpScreenFunctionsCBS As cmp_ScreenFunctions:
            AppHeight: =App.Height
            AppHeightBreakPoints: =AppHeightBreakpoints
            X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width
            Y: =shpPageBackdropCBS.Y + shpPageBackdropCBS.Height
            ZIndex: =4

    cmpErrorModalCBS As cmp_ErrorModal:
        Color_Background: =LookUp(Colors, Color = "Background", RGB)
        Color_Focused: =LookUp(Colors, Color = "Focus Primary", RGB)
        Color_Primary: =LookUp(Colors, Color = "Primary", RGB)
        Display_ErrorSubtitle: =LookUp(colTranslationTable, key = "errorpage.subtitle" && language.Value = gblAppUserLang, text)
        Display_ErrorTitle: =LookUp(colTranslationTable, key = "errorpage.title" && language.Value = gblAppUserLang, text)
        Height: =shpPageBackdropCBS.Height
        ModalHeight: =shpPageBackdropCBS.Height
        ModalWidth: =shpPageBackdropCBS.Width
        ScreenSize_Height: =cmpScreenFunctionsCBS.ScreenSize
        ScreenSize_Width: =lblScreenWidthSizingCBS.Text
        Visible: =locIsErrorModalVisible
        Width: =shpPageBackdropCBS.Width
        X: =shpPageBackdropCBS.X
        Y: =shpPageBackdropCBS.Y
        ZIndex: =24

    grpLoadingPageCBS As group:
        Height: =5
        Width: =5
        X: =20
        Y: =1096
        ZIndex: =28

        crdLoadingPageCBS As button:
            BorderColor: =LookUp(Colors, Color = "Primary", RGB)
            BorderThickness: =0
            DisabledBorderColor: =RGBA(0,0,0,0)
            DisabledColor: =Self.Color
            DisabledFill: =Self.Fill
            DisplayMode: =DisplayMode.Disabled
            Fill: =RGBA(255, 255, 255, 1)
            Height: |-
                =cmpNavCBS.Y - Self.Y +
                Min(30 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2),
                     30 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2)
                )/2
            HoverBorderColor: =
            HoverColor: =
            HoverFill: =
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    10 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =0
            TabIndex: =-1
            Text: =
            Visible: =locIsPageLoadingVisible
            Width: |-
                =shpPageBackdropCBS.Width
                - (10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
                - (25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
            X: =Parent.Width/2 - Self.Width/2
            Y: |-
                =cmpHeaderCBS.Y + cmpHeaderCBS.Height + 
                Min(30 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2),
                    30 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2)
                )
            ZIndex: =17

        imgLoadingPageCBS As image:
            DisplayMode: =DisplayMode.View
            Height: =Self.Width
            Image: =loading_spinner
            Visible: =locIsPageLoadingVisible
            Width: =Min(crdLoadingPageCBS.Width/2, crdLoadingPageCBS.Height/3)
            X: =crdLoadingPageCBS.X + crdLoadingPageCBS.Width/2 - Self.Width/2
            Y: =(crdLoadingPageCBS.Y + crdLoadingPageCBS.Height + cmpNavCBS.Height)/2 - Self.Height/2
            ZIndex: =18

    grpFeedbackModal As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =32

        crdFeedbackCBS As button:
            BorderColor: =LookUp(Colors, Color = "Primary", RGB)
            BorderThickness: =0
            DisabledColor: =Self.Color
            DisabledFill: =Self.Fill
            DisplayMode: =DisplayMode.Disabled
            Fill: =RGBA(255, 255, 255, 1)
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingCBS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Height: |-
                =400 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 0.5,  
                        ScreenSize.Medium, 0.85,
                        ScreenSize.Large, 1.3, 
                        1.75)
            HoverBorderColor: =
            HoverColor: =
            HoverFill: =
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: =0
            TabIndex: =-1
            Text: =
            Visible: =locIsFeedbackDisplayed
            Width: |-
                =cmpHeaderCBS.Width
                - (10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
                - (25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,  
                        ScreenSize.Large, 1.75,
                        5))
            X: =shpPageBackdropCBS.X + shpPageBackdropCBS.Width/2 - Self.Width/2
            Y: |-
                =(cmpHeaderCBS.Y + cmpHeaderCBS.Height + cmpNavCBS.Y)/2 - 
                (Self.Height + 
                Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 0.5,  
                        ScreenSize.Medium, 0.7, 
                        ScreenSize.Large, 1,
                        1.35),
                    25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 0.5,  
                        ScreenSize.Medium, 0.7, 
                        ScreenSize.Large, 1,
                        1.35)
                ) +
                btnOpenFeedbackCBS.Height)/2
            ZIndex: =7

        btnOpenFeedbackCBS As button:
            BorderThickness: =0
            Fill: =LookUp(Colors, Color = "Primary", RGB)
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingCBS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Font: =Font.'Lato Black'
            Height: |-
                =Min(80 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 0.9,  
                        ScreenSize.Medium, 1,  
                        ScreenSize.Large, 1.45,
                        1.65),
                    80 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 0.9,  
                        ScreenSize.Medium, 1,  
                        ScreenSize.Large, 1.45,
                        1.65) 
                )
            HoverFill: =LookUp(Colors, Color = "Muted Primary", RGB)
            OnSelect: |-
                =Launch(Switch(gblAppUserLang, "fr", "https://forms.office.com/Pages/ResponsePage.aspx?id=L8Yqt9UG1UyCTu6SMZpGdox_Rb4oSqRAq_ow_cyla3dUMFJOOVJQUktDQ0kxMkM0VkpEREM4OEFIOC4u",
                "https://forms.office.com/Pages/ResponsePage.aspx?id=L8Yqt9UG1UyCTu6SMZpGdox_Rb4oSqRAq_ow_cyla3dUMzcxMDE5TEg5QTlFMDA0SERHVzdINDhWSi4u"));
                UpdateContext({locIsFeedbackDisplayed:false});
            RadiusBottomLeft: =Self.RadiusTopLeft
            RadiusBottomRight: =Self.RadiusTopLeft
            RadiusTopLeft: |-
                =Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2),
                    15 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.5,  
                        2)
                )
            RadiusTopRight: =Self.RadiusTopLeft
            Size: |-
                =Min(18 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    18 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            TabIndex: =If(locIsFeedbackDisplayed, 0, -1)
            Text: =LookUp(colTranslationTable, key = "bookingconfirmation.feedback.open" && language.Value = gblAppUserLang, text)
            Visible: =locIsFeedbackDisplayed
            Width: =crdFeedbackCBS.Width 
            X: =crdFeedbackCBS.X + crdFeedbackCBS.Width/2 - Self.Width/2
            Y: |-
                =crdFeedbackCBS.Y + crdFeedbackCBS.Height +
                Min(25 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 0.5,  
                        ScreenSize.Medium, 0.7, 
                        ScreenSize.Large, 1,
                        1.35),
                    25 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 0.5,  
                        ScreenSize.Medium, 0.7, 
                        ScreenSize.Large, 1,
                        1.35)
                ) 
            ZIndex: =10

        lblFeedbackSubtitleCBS As label:
            Align: =Align.Center
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.Lato
            FontWeight: =FontWeight.Semibold
            Height: =70
            Size: =lblSuccessMessage.Size
            Text: =LookUp(colTranslationTable, key = "myprofile.feedback.subtitle" && language.Value = gblAppUserLang, text)
            Visible: =locIsFeedbackDisplayed
            Width: =crdFeedbackCBS.Width * 0.8
            X: =crdFeedbackCBS.X + crdFeedbackCBS.Width/2 - Self.Width/2
            Y: |-
                =lblFeedbackTitleCBS.Y + lblFeedbackTitleCBS.Height + 
                Min(10 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    10 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            ZIndex: =11

        lblFeedbackTitleCBS As label:
            Align: =Align.Center
            AutoHeight: =true
            Color: =LookUp(Colors, Color = "Primary", RGB)
            Font: =Font.'Lato Black'
            Height: =70
            Size: |-
                =Min(22 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    22 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            Text: =LookUp(colTranslationTable, key = "myprofile.feedback.title" && language.Value = gblAppUserLang, text)
            Visible: =locIsFeedbackDisplayed
            Width: =crdFeedbackCBS.Width * 0.8
            X: |
                =crdFeedbackCBS.X + crdFeedbackCBS.Width/2 - Self.Width/2
            Y: |-
                =imgFeedbackIconCBS.Y + imgFeedbackIconCBS.Height +
                Min(18 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9),
                    18 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.5,
                        ScreenSize.Large, 1.75,  
                        1.9) 
                )
            ZIndex: =12

        imgFeedbackIconCBS As image:
            Height: =Self.Width
            Image: =feedback
            Visible: =locIsFeedbackDisplayed
            Width: =Min(crdFeedbackCBS.Width/2, crdFeedbackCBS.Height/3)
            X: =crdFeedbackCBS.X + crdFeedbackCBS.Width/2 - Self.Width/2
            Y: |-
                =crdFeedbackCBS.Y + crdFeedbackCBS.Height/2 -
                (Self.Height + 
                Min(18 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2),
                    18 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2) 
                ) +
                lblFeedbackTitleCBS.Height +
                Min(15 * Switch(Value(lblScreenWidthSizingCBS.Text),  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2),
                     15 * Switch(cmpScreenFunctionsCBS.ScreenSize,  
                        ScreenSize.Small, 1,  
                        ScreenSize.Medium, 1.25, 
                        ScreenSize.Large, 1.5,
                        2)
                ) +
                lblFeedbackSubtitleCBS.Height)/2
            ZIndex: =13

        shpCloseModalBackgroundCBS As circle:
            Fill: =Color.White
            Height: =Self.Width
            Visible: =locIsFeedbackDisplayed
            Width: =imgCloseModalCBS.Width
            X: =imgCloseModalCBS.X
            Y: =imgCloseModalCBS.Y
            ZIndex: =14

        imgCloseModalCBS As image:
            AccessibleLabel: =
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingCBS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Height: =Self.Width
            HoverBorderColor: =
            HoverFill: =
            Image: ='cancel (primary)'
            OnSelect: |-
                =UpdateContext({locIsFeedbackDisplayed: false});
            Visible: =locIsFeedbackDisplayed
            Width: |-
                =Min(40 * Switch(Value(lblScreenWidthSizingCBS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            2),
                    40 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            2)
                )
            X: =crdFeedbackCBS.X + crdFeedbackCBS.Width - (Self.Height * 0.75)
            Y: =crdFeedbackCBS.Y - Self.Height + (Self.Height * 0.75)
            ZIndex: =15

        shpCloseModalHoverCBS As circle:
            AccessibleLabel: =LookUp(colTranslationTable, key = "bookingconfirmation.feedback.close" && language.Value = gblAppUserLang, text)
            Fill: =RGBA(0,0,0,0)
            FocusedBorderColor: =LookUp(Colors, Color = "Focus Primary", RGB)
            FocusedBorderThickness: |-
                =Min(2.5 * Switch(Value(lblScreenWidthSizingCBS.Text),
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75),
                    2.5 * Switch(cmpScreenFunctionsCBS.ScreenSize,
                            ScreenSize.Small, 1,
                            ScreenSize.Medium, 1.25,
                            ScreenSize.Large, 1.5,
                            1.75)
                )
            Height: =imgCloseModalCBS.Height
            HoverFill: =RGBA(255,255,255,0.5)
            OnSelect: =Select(imgCloseModalCBS);
            PressedFill: =RGBA(255,255,255,0.75)
            TabIndex: =If(locIsFeedbackDisplayed, 0, -1)
            Visible: =locIsFeedbackDisplayed
            Width: =imgCloseModalCBS.Width
            X: =imgCloseModalCBS.X
            Y: =imgCloseModalCBS.Y
            ZIndex: =16

