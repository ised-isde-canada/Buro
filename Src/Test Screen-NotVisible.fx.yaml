"'Test Screen-NotVisible' As screen":
    Fill: =LookUp(Colors, Color = "Background", RGB)
    Height: =App.Height
    OnVisible: |-
        =ClearCollect(colTestScreen_Data, Table({Argument: "locTestABC", Value: 10}, {Argument: "locTestXYZ", Value: 20}));
        
        UpdateContext({locDatePickerVisible: false, locSelectedDate: ""});
        
        ClearCollect(
            colSearch_TestSeatingTypes,
            If(
                gblAppUserLang = "en",
                RenameColumns(
                    DropColumns(
                        GroupBy(
                            colSeatingTypeTable,
                            "ID",
                            "seating_type_name_en",
                            "leftover"
                        ),
                        "leftover"
                    ),
                    "seating_type_name_en",
                    "Result"
                ),
                RenameColumns(
                    DropColumns(
                        GroupBy(
                            colSeatingTypeTable,
                            "ID",
                            "seating_type_name_fr",
                            "leftover"
                        ),
                        "leftover"
                    ),
                    "seating_type_name_fr",
                    "Result"
                )
            ),
            {
                ID: -1,
                Result: LookUp(
                    colTranslationTable,
                    key = "bookingsearch.seatingtype.any" && language.Value = gblAppUserLang,
                    text
                )
            }
        );
        
        
        Concurrent(
            //Finds the longest seating type description and is used to set the size of the gallery template height
            UpdateContext({locLongestSeatingTypeDesc: 
                First(
                    Sort(
                        ForAll(
                            colSeatingTypeTable As Result,
                            {
                                ID: Result.ID,
                                Len: Switch(
                                    gblAppUserLang,
                                    "fr",
                                    Len(Result.seating_type_description_fr),
                                    Len(Result.seating_type_description_en)
                                )
                            }
                        ),
                    Len,
                    Descending
                    )
                )
            }),
        
            //Finds the longest seating type name and is used to set the size of the gallery template height
            UpdateContext({locLongestSeatingTypeName: 
                First(
                    Sort(
                        ForAll(
                            colSeatingTypeTable As Result,
                            {
                                ID: Result.ID,
                                Len: Switch(
                                    gblAppUserLang,
                                    "fr",
                                    Len(Result.seating_type_name_fr),
                                    Len(Result.seating_type_name_en)
                                )
                            }
                        ),
                    Len,
                    Descending
                    )
                ).ID
            })
        );
        ClearCollect(colSeatTypesPage, SeatingTypes);
    Width: =App.Width

    shpScreenBackdropTS As rectangle:
        BorderColor: =RGBA(255, 255, 255, 1)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Fill: =RGBA(224, 224, 224,1)
        Height: =Parent.Height
        Width: =Parent.Width
        ZIndex: =1

    shpPageBackdropTS As rectangle:
        BorderColor: =RGBA(204, 204, 204, 1)
        BorderThickness: =2
        Fill: =LookUp(Colors, Color = "Background", RGB)
        FocusedBorderThickness: =4
        Height: =Parent.Height
        Width: |
            =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width, App.DesignWidth * 2)
        X: =(Parent.Width-Self.Width) /2
        ZIndex: =2

    cmpNavTS As cmp_MainNav:
        FocusedColor: =LookUp(Colors, Color = "Focus Primary", RGB)
        FontSize: |-
            =Min(10 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                10 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        Height: |-
            =Min(86 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1.25,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                86 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1.25,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        MutedColor: =LookUp(Colors, Color = "Grey", RGB)
        NavigateToText: =LookUp(colTranslationTable, key = "nav.navigate" && language.Value = gblAppUserLang, text)
        NavItems: |-
            =Table(
                {
                    Key: "profile",
                    Label: gblAppUserDetails.givenName,
                    NavigationLink: 'My Profile Screen'
                },
                {
                    Key: "newBooking",
                    Label: LookUp(colTranslationTable, key = "nav.book" && language.Value = gblAppUserLang, text),
                    NavigationLink: 'Search Screen'
                },
                {
                    Key: "bookings",
                    Label: LookUp(colTranslationTable, key = "nav.bookings" && language.Value = gblAppUserLang, text),
                    NavigationLink: 'My Bookings Screen'
                }
            )
        ScreenSize_Height: =cmpScreenFunctionsTS.ScreenSize
        ScreenSize_Width: =Value(lblScreenWidthSizingTS.Text)
        Visible: =true
        Width: |-
            =If(
            Parent.Size <> ScreenSize.ExtraLarge,
            App.Width-4,
            (App.DesignWidth*2)-4
            )
        X: =(Parent.Width-Self.Width) /2
        Y: =App.Height-cmpNavTS.Height
        ZIndex: =5

    cmpPageHeadingTS As cmp_PageHeading:
        BackNavigateTo: =
        BackText: =""
        FontSize: |-
            =Min(22 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                22 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        HasBackBtn: =false
        HeadingText: ="Test Screen"
        Height: |-
            =Min(78 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    1.75),
                78 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.25,
                    ScreenSize.Large, 1.5,  
                    1.75)
            )
        PositionOffset: |-
            =//Recreates the card offset using non-dependent properties
            (Parent.Width/2 -
            (If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
            - (10 * Switch(Parent.Size,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5))
            - (25 * Switch(Parent.Size,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,  
                    ScreenSize.Large, 1.75,
                    5)))/2)
            - shpPageBackdropTS.X
        PrimaryColor: =LookUp(Colors, Color = "Primary", RGB)
        ScreenSize_Height: =cmpScreenFunctionsTS.ScreenSize
        ScreenSize_Width: =Value(lblScreenWidthSizingTS.Text)
        Width: =If(Parent.Size <> ScreenSize.ExtraLarge, App.Width-4, (App.DesignWidth*2)-4)
        X: =(Parent.Width-Self.Width) /2
        Y: |-
            =If(
            Parent.Size=ScreenSize.Small,
            2,
            4
            )
        ZIndex: =6

    lblTestModeEnabledDetailsTS As label:
        Align: =Align.Center
        AutoHeight: =true
        Color: =LookUp(Colors, Color = "Primary", RGB)
        Font: =Font.Lato
        Height: =70
        Size: |-
            =Min(12 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                12 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        Text: |-
            ="To disabled follow these steps" & "
            1. In the Users table find your email entry" & "
            2. Change the 'tester' field from a checkmark of 'YES' to no checkmark denoting 'NO'" & "
            3. Restart  Buro"
        Width: =560
        X: =shpPageBackdropTS.X + shpPageBackdropTS.Width/2 - Self.Width/2
        Y: =lblTestModeEnabledTS.Y + lblTestModeEnabledTS.Height
        ZIndex: =7

    lblTestModeEnabledTS As label:
        Align: =Align.Center
        AutoHeight: =true
        Color: =LookUp(Colors, Color = "Primary", RGB)
        Font: =Font.'Lato Black'
        Height: =70
        Size: |-
            =Min(12 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                12 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        Text: ="You currently have test mode enabled"
        Width: =560
        X: =shpPageBackdropTS.X + shpPageBackdropTS.Width/2 - Self.Width/2
        Y: |-
            =cmpPageHeadingTS.Y + cmpPageHeadingTS.Height + 
            Min(100 * Switch(Value(lblScreenWidthSizingTS.Text),  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2),
                100 * Switch(cmpScreenFunctionsTS.ScreenSize,  
                    ScreenSize.Small, 1,  
                    ScreenSize.Medium, 1.5,
                    ScreenSize.Large, 1.75,  
                    2)
            )
        ZIndex: =8

    grpScreenSizingTS As group:
        Height: =5
        Width: =5
        X: =20
        Y: =20
        ZIndex: =9

        cmpScreenFunctionsTS As cmp_ScreenFunctions:
            AppHeight: =App.Height
            AppHeightBreakPoints: =AppHeightBreakpoints
            X: =shpPageBackdropTS.X + shpPageBackdropTS.Width
            Y: =shpPageBackdropTS.Y + shpPageBackdropTS.Height
            ZIndex: =3

        lblScreenWidthSizingTS As label:
            Height: =0
            Size: =0
            Text: =Parent.Size
            Visible: =false
            Width: =0
            X: =shpPageBackdropSS.X + shpPageBackdropSS.Width
            Y: =shpPageBackdropSS.Y + shpPageBackdropSS.Height
            ZIndex: =4

    Button3_4 As button:
        Height: =100
        OnSelect: |-
            =//SMTP.SendEmailV3({To: "ian.wilkinson@ised-isde.gc.ca", Subject: "test", Body: "Hello test"});
        Size: =12
        Text: ="Test Send SMTP Email"
        Width: =280
        X: =182
        Y: =747
        ZIndex: =22

    grpTestButtons As group:
        Height: =5
        Width: =5
        X: =60
        Y: =60
        ZIndex: =22

        Button3 As button:
            Height: =100
            OnSelect: |-
                =ClearCollect(colConfirmBooking_Result, First(Filter(Reservations, ID = 216)));
                Navigate(
                        'Confirm Booking Screen',
                        ScreenTransition.Cover
                    )
            Size: =12
            Text: ="Outbound Confirm Bkn"
            Width: =280
            X: =shpPageBackdropTS.X + shpPageBackdropTS.Width/2 - Self.Width/2
            Y: =shpPageBackdropTS.Y + shpPageBackdropTS.Height/2 - Self.Height/2
            ZIndex: =15

        Button3_1 As button:
            Height: =100
            OnSelect: |-
                =ClearCollect(colConfirmBooking_Result, First(Filter(Reservations, ID = 146)));
                Navigate(
                        'Confirm Booking Screen',
                        ScreenTransition.Cover
                    )
            Size: =12
            Text: ="Self Confirm Bkn"
            Width: =280
            X: =182
            Y: =201
            ZIndex: =16

        Button3_2 As button:
            Height: =100
            OnSelect: |
                =//On search, enable all Seating Arrangments again
                ClearCollect(colMyResultsFilter, ForAll(colSeatingArrangementTable As refTable, { ID: refTable.ID, Enabled: false}));
                
                Navigate(
                    'Results Screen',
                    ScreenTransition.Cover,
                    {
                        locRegion: First(Filter(colSearch_Regions, ID = 1)),
                        locBuilding: LookUp(Buildings, region_id.Value = Text(1)),
                        locFloor: LookUp(Floors, building_id.Value = Text(1)),
                        locNeighbourhood: LookUp(Neighbourhoods, floor_id.Value = Text(1)),
                        locSeatingType: {ID: -1},
                        locDate: DateAdd(Today(), 5, Days),
                        locTimeRange: LookUp(Timeslots, time_range_en = "ALL DAY")
                    }
                );
            Size: =12
            Text: ="Autofill search screen"
            Width: =280
            X: =180
            Y: =104
            ZIndex: =20

        Button3_3 As button:
            Height: =100
            OnSelect: |-
                =ClearCollect(colConfirmBooking_Result, First(Filter(Reservations, ID = 473)));
                Navigate(
                        'Confirm Booking Screen',
                        ScreenTransition.Cover
                    )
            Size: =12
            Text: ="Inbound Confirm Bkn"
            Width: =280
            X: =shpPageBackdropTS.X + shpPageBackdropTS.Width/2 - Self.Width/2
            Y: =Button3.Y + Button3.Height
            ZIndex: =21

    Button3_5 As button:
        Height: =100
        OnSelect: =Notify("Hello World", NotificationType.Error, 0)
        Size: =12
        Text: ="Test Notify"
        Width: =280
        X: =182
        Y: =847
        ZIndex: =23

